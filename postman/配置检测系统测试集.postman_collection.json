{
	"info": {
		"_postman_id": "aaa5e0f2-9564-4de9-b9d9-7527cbfe1e51",
		"name": "配置检测系统测试集",
		"description": "主站和终端系统自动化配置检测工具，后台Restful接口测试集",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. 系统信息",
			"item": [
				{
					"name": "1.1 获取系统版本信息",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/sysinfo/version?sys_type=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sysinfo",
								"version"
							],
							"query": [
								{
									"key": "sys_type",
									"value": "1",
									"description": "1: 主站；2: 终端"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2. 用户管理",
			"item": [
				{
					"name": "2.1 添加新用户",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
								"exec": [
									"var num = Math.ceil(Math.random() * 10000);",
									"pm.environment.set(\"account_name\", \"user\" + num);",
									"pm.environment.set(\"nick_name\", \"测试--\" + num);",
									"var phone = \"13\" + Math.ceil(Math.random() * 100000) + num;",
									"pm.environment.set(\"phone\", phone);",
									"pm.environment.set(\"email\", \"u\" + num + \"@163.com\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
								"exec": [
									"pm.test(\"add user\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(0);",
									"    ",
									"    pm.environment.set(\"user_uuid\", jsonData.payload.uuid);",
									"    pm.environment.set(\"account_name\", jsonData.payload.account);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "{{nick_name}}",
									"type": "text"
								},
								{
									"key": "phone",
									"value": "{{phone}}",
									"type": "text"
								},
								{
									"key": "account",
									"value": "{{account_name}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{default_password}}",
									"type": "text"
								},
								{
									"key": "address",
									"value": "addr1",
									"type": "text"
								},
								{
									"key": "email",
									"value": "{{email}}",
									"type": "text"
								},
								{
									"key": "description",
									"value": "1111",
									"type": "text"
								},
								{
									"key": "user_group",
									"value": "1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/users/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.2 获取所有用户",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.3 账号获取用户uuid",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/user-by-account?account=测试--538",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"user-by-account"
							],
							"query": [
								{
									"key": "account",
									"value": "测试--538"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2.4 更新用户",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "user333",
									"type": "text"
								},
								{
									"key": "phone",
									"value": "13910011234",
									"type": "text"
								},
								{
									"key": "account",
									"value": "acc1",
									"type": "text"
								},
								{
									"key": "address",
									"value": "addr1",
									"type": "text"
								},
								{
									"key": "email",
									"value": "111@1.cn",
									"type": "text"
								},
								{
									"key": "description",
									"value": "1111",
									"type": "text"
								},
								{
									"key": "user_group",
									"value": "1",
									"type": "text"
								},
								{
									"key": "uuid",
									"value": "{{user_uuid}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/users/update",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.5 修改用户密码",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "uuid",
									"value": "{{user_uuid}}",
									"type": "text"
								},
								{
									"key": "old_pwd",
									"value": "12345678",
									"type": "text"
								},
								{
									"key": "new_pwd",
									"value": "22345678",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/users/change-pwd",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"change-pwd"
							],
							"query": [
								{
									"key": "uuid",
									"value": "{{user_uuid}}",
									"disabled": true
								},
								{
									"key": "old-pwd",
									"value": "123456",
									"disabled": true
								},
								{
									"key": "new-pwd",
									"value": "223456",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2.6 校验用户密码",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "uuid",
									"value": "",
									"type": "text"
								},
								{
									"key": "account",
									"value": "user1326",
									"description": "account 和 uuid二选一，uuid优先",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345678",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/users/verify-pwd",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"verify-pwd"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.7 uuid 查找用户",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/user-by-uuid?uuid={{user_uuid}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"user-by-uuid"
							],
							"query": [
								{
									"key": "uuid",
									"value": "{{user_uuid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2.8 激活用户",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "uuid",
									"value": "",
									"type": "text"
								},
								{
									"key": "account",
									"value": "user1326",
									"description": "account 和 uuid二选一，uuid优先",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/users/activate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"activate"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.9 修改用户组",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "uuid",
									"value": "177f3e92-a88f-4faf-8c2e-f91900275c74",
									"type": "text"
								},
								{
									"key": "user_group",
									"value": "99",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/users/change-user-group",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"change-user-group"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.11 用户名称是否唯一",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/check-unique-name?user_name=user1&user_uuid=b61a6467-bb69-4548-9256-f9a908c1c3f1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"check-unique-name"
							],
							"query": [
								{
									"key": "user_name",
									"value": "user1"
								},
								{
									"key": "user_uuid",
									"value": "b61a6467-bb69-4548-9256-f9a908c1c3f1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2.12 账号登出",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/logout?user_uuid={{user_uuid}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"logout"
							],
							"query": [
								{
									"key": "user_uuid",
									"value": "{{user_uuid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3. 任务管理",
			"item": [
				{
					"name": "3.1 添加新任务",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
								"exec": [
									"var num = Math.ceil(Math.random() * 10000);",
									"pm.environment.set(\"task_name\", \"task_\" + num);",
									"pm.environment.set(\"task_code\", \"C_\" + num);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
								"exec": [
									"pm.test(\"add task\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(0);",
									"    ",
									"    pm.environment.set(\"task_uuid\", jsonData.payload.uuid);",
									"    pm.environment.set(\"task_name\", jsonData.payload.name);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "{{task_name}}",
									"type": "text"
								},
								{
									"key": "code",
									"value": "{{task_code}}",
									"type": "text"
								},
								{
									"key": "description",
									"value": "some description",
									"type": "text"
								},
								{
									"key": "asset_uuid",
									"value": "{{asset_uuid}}",
									"type": "text"
								},
								{
									"key": "policy_groups",
									"value": "some policies",
									"type": "text"
								},
								{
									"key": "create_user_uuid",
									"value": "{{user_uuid}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/tasks/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.2 移除任务",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "uuid",
									"value": "{{task_uuid}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/tasks/remove",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"remove"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.3 获取所有的任务",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.4 读取指定任务",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks/get-task?uuid={{task_uuid}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"get-task"
							],
							"query": [
								{
									"key": "uuid",
									"value": "{{task_uuid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "3.5 更新任务",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
								"exec": [
									"var num = Math.ceil(Math.random() * 10000);",
									"pm.environment.set(\"new_task_name\", \"NewT_\" + num);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
								"exec": [
									"pm.test(\"update task\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(0);",
									"    ",
									"    pm.environment.set(\"task_uuid\", jsonData.payload.uuid);",
									"    pm.environment.set(\"task_name\", jsonData.payload.name);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "uuid",
									"value": "{{task_uuid}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{new_task_name}}",
									"type": "text"
								},
								{
									"key": "code",
									"value": "{{task_code}}",
									"type": "text"
								},
								{
									"key": "description",
									"value": "some description",
									"type": "text"
								},
								{
									"key": "asset_uuid",
									"value": "{{asset_uuid}}",
									"type": "text"
								},
								{
									"key": "policy_groups",
									"value": "some policies",
									"type": "text"
								},
								{
									"key": "create_user_uuid",
									"value": "{{user_uuid}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/tasks/update",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.6 执行任务",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "uuid",
									"value": "{{task_uuid}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/tasks/execute",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"execute"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.7 获取所有的任务详细信息",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks/all-task-details",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"all-task-details"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.8 添加新任务的详细信息",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
								"exec": [
									"var num = Math.ceil(Math.random() * 10000);",
									"pm.environment.set(\"task_name\", \"task_\" + num);",
									"pm.environment.set(\"task_code\", \"C_\" + num);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
								"exec": [
									"pm.test(\"add task\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(0);",
									"    ",
									"    pm.environment.set(\"task_uuid\", jsonData.payload.uuid);",
									"    pm.environment.set(\"task_name\", jsonData.payload.name);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "{{task_name}}",
									"type": "text"
								},
								{
									"key": "code",
									"value": "{{task_code}}",
									"type": "text"
								},
								{
									"key": "description",
									"value": "some description",
									"type": "text"
								},
								{
									"key": "asset_uuid",
									"value": "{{asset_uuid}}",
									"description": "asset_uuid为空时，表示采用asset其它信息新建一条asset记录",
									"type": "text",
									"disabled": true
								},
								{
									"key": "policy_groups",
									"value": "[]",
									"type": "text"
								},
								{
									"key": "create_user_uuid",
									"value": "{{user_uuid}}",
									"type": "text"
								},
								{
									"key": "asset_name",
									"value": "{{asset_name}}",
									"type": "text"
								},
								{
									"key": "asset_ip",
									"value": "{{asset_ip}}",
									"type": "text"
								},
								{
									"key": "asset_port",
									"value": "{{asset_port}}",
									"type": "text"
								},
								{
									"key": "asset_os_type",
									"value": "Ubuntu",
									"type": "text"
								},
								{
									"key": "asset_os_ver",
									"value": "18.0.4",
									"type": "text"
								},
								{
									"key": "asset_login_user",
									"value": "root",
									"type": "text"
								},
								{
									"key": "asset_login_pwd",
									"value": "root",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/tasks/add-task-details",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"add-task-details"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.9 更新新任务的详细信息",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
								"exec": [
									"var num = Math.ceil(Math.random() * 10000);",
									"pm.environment.set(\"task_name\", \"task_\" + num);",
									"pm.environment.set(\"task_code\", \"C_\" + num);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
								"exec": [
									"pm.test(\"add task\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(0);",
									"    ",
									"    pm.environment.set(\"task_uuid\", jsonData.payload.uuid);",
									"    pm.environment.set(\"task_name\", jsonData.payload.name);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "uuid",
									"value": "{{task_uuid}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{task_name}}",
									"type": "text"
								},
								{
									"key": "code",
									"value": "{{task_code}}",
									"type": "text"
								},
								{
									"key": "description",
									"value": "some description",
									"type": "text"
								},
								{
									"key": "asset_uuid",
									"value": "{{asset_uuid}}",
									"description": "asset_uuid为空时，表示采用asset其它信息新建一条asset记录",
									"type": "text",
									"disabled": true
								},
								{
									"key": "policy_groups",
									"value": "some policies",
									"type": "text"
								},
								{
									"key": "create_user_uuid",
									"value": "{{user_uuid}}",
									"type": "text"
								},
								{
									"key": "asset_name",
									"value": "{{asset_name}}",
									"type": "text"
								},
								{
									"key": "asset_ip",
									"value": "{{asset_ip}}",
									"type": "text"
								},
								{
									"key": "asset_port",
									"value": "{{asset_port}}",
									"type": "text"
								},
								{
									"key": "asset_os_type",
									"value": "Ubuntu",
									"type": "text"
								},
								{
									"key": "asset_os_ver",
									"value": "18.0.4",
									"type": "text"
								},
								{
									"key": "asset_login_user",
									"value": "root",
									"type": "text"
								},
								{
									"key": "asset_login_pwd",
									"value": "root",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/tasks/update-task-details",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"update-task-details"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.10 获取任务的运行状态信息",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6f4f3c18-0e68-4f88-8a63-26fdcfd0df43",
								"exec": [
									"var uuidList=[];",
									"var uuid = pm.environment.get(\"task_uuid\");",
									"uuidList.push(uuid);",
									"// uuidList.push(uuid);",
									"// uuidList.push(uuid);",
									"// uuidList.push(uuid);",
									"var uuids;",
									"uuids = uuid + \",\";",
									"uuids += uuid + \",\";",
									"uuids += uuid + \",\";",
									"uuids += uuid;",
									"pm.environment.set(\"uuid_list\", uuids);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks/run-status?project_uuid",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"run-status"
							],
							"query": [
								{
									"key": "uuid",
									"value": "{{task_uuid}}",
									"disabled": true
								},
								{
									"key": "uuid_list",
									"value": "{{uuid_list}}",
									"disabled": true
								},
								{
									"key": "project_uuid",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "3.12 设置任务的定时计划",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6f4f3c18-0e68-4f88-8a63-26fdcfd0df43",
								"exec": [
									"var uuidList=[];",
									"var uuid = pm.environment.get(\"task_uuid\");",
									"uuidList.push(uuid);",
									"// uuidList.push(uuid);",
									"// uuidList.push(uuid);",
									"// uuidList.push(uuid);",
									"var uuids;",
									"uuids = uuid + \",\";",
									"uuids += uuid + \",\";",
									"uuids += uuid + \",\";",
									"uuids += uuid;",
									"pm.environment.set(\"uuid_list\", uuids);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks/set-task-schedule?task_uuid={{task_uuid}}&run_time",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"set-task-schedule"
							],
							"query": [
								{
									"key": "task_uuid",
									"value": "{{task_uuid}}"
								},
								{
									"key": "project_uuid",
									"value": "",
									"disabled": true
								},
								{
									"key": "run_time",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "3.13 停止任务的定时计划",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6f4f3c18-0e68-4f88-8a63-26fdcfd0df43",
								"exec": [
									"var uuidList=[];",
									"var uuid = pm.environment.get(\"task_uuid\");",
									"uuidList.push(uuid);",
									"// uuidList.push(uuid);",
									"// uuidList.push(uuid);",
									"// uuidList.push(uuid);",
									"var uuids;",
									"uuids = uuid + \",\";",
									"uuids += uuid + \",\";",
									"uuids += uuid + \",\";",
									"uuids += uuid;",
									"pm.environment.set(\"uuid_list\", uuids);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks/stop-scheduler?task_uuid={{task_uuid}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"stop-scheduler"
							],
							"query": [
								{
									"key": "task_uuid",
									"value": "{{task_uuid}}"
								},
								{
									"key": "project_uuid",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "3.15 任务名称是否唯一",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6f4f3c18-0e68-4f88-8a63-26fdcfd0df43",
								"exec": [
									"var uuidList=[];",
									"var uuid = pm.environment.get(\"task_uuid\");",
									"uuidList.push(uuid);",
									"// uuidList.push(uuid);",
									"// uuidList.push(uuid);",
									"// uuidList.push(uuid);",
									"var uuids;",
									"uuids = uuid + \",\";",
									"uuids += uuid + \",\";",
									"uuids += uuid + \",\";",
									"uuids += uuid;",
									"pm.environment.set(\"uuid_list\", uuids);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks/check-unique-name?task_name=新建任务&task_uuid=175cc32c-5a33-4f6f-8e37-1a288171c043",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"check-unique-name"
							],
							"query": [
								{
									"key": "task_name",
									"value": "新建任务"
								},
								{
									"key": "task_uuid",
									"value": "175cc32c-5a33-4f6f-8e37-1a288171c043",
									"description": "参数为空，表示全局检查名称唯一性；否则检查除自己外，其他任务是否使用该名称"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4. 策略管理",
			"item": [
				{
					"name": "4.1 添加新策略",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
								"exec": [
									"var num = Math.ceil(Math.random() * 10000);",
									"pm.environment.set(\"policy_name\", \"policy-\" + num);",
									"pm.environment.set(\"policy_code\", \"code-\" + num);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
								"exec": [
									"pm.test(\"add policy\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(0);",
									"    ",
									"    pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "{{policy_name}}",
									"type": "text"
								},
								{
									"key": "code",
									"value": "{{policy_code}}",
									"type": "text"
								},
								{
									"key": "group_uuid",
									"value": "ec467b52-4140-4bf4-8e26-8c28b249cbdb",
									"type": "text"
								},
								{
									"key": "type",
									"value": "t1",
									"type": "text"
								},
								{
									"key": "risk_level",
									"value": "1",
									"type": "text"
								},
								{
									"key": "solutions",
									"value": "fdpgkflg",
									"type": "text"
								},
								{
									"key": "create_user_uuid",
									"value": "{{user_uuid}}",
									"type": "text"
								},
								{
									"key": "status",
									"value": "1",
									"type": "text"
								},
								{
									"key": "os_type",
									"value": "1",
									"type": "text"
								},
								{
									"key": "baseline",
									"value": "1",
									"type": "text"
								},
								{
									"key": "run_mode",
									"value": "4",
									"type": "text"
								},
								{
									"key": "run_contents",
									"value": "systeminfo",
									"type": "text"
								},
								{
									"key": "consume_time",
									"value": "5000",
									"type": "text"
								},
								{
									"key": "asset_uuid",
									"value": "{{asset_uuid}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/policies/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"policies",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.2 删除策略",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
								"exec": [
									"pm.test(\"delete policy\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(0);",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "uuid",
									"value": "{{policy_uuid}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/policies/remove",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"policies",
								"remove"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.3 获取所有策略",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f03d584-0050-4232-99b5-5867aa484743",
								"exec": [
									"pm.test(\"get all policies\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/policies/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"policies",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.4 获取指定的策略",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c449b75b-5096-43ea-993a-1992d435f975",
								"exec": [
									"pm.test(\"get policy\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/policies/get-policy?uuid={{policy_uuid}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"policies",
								"get-policy"
							],
							"query": [
								{
									"key": "uuid",
									"value": "{{policy_uuid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4.5 更新策略",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
								"exec": [
									"var num = Math.ceil(Math.random() * 10000);",
									"pm.environment.set(\"policy_name\", \"policy-\" + num);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
								"exec": [
									"pm.test(\"update policy\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "uuid",
									"value": "{{policy_uuid}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{policy_name}}",
									"type": "text"
								},
								{
									"key": "code",
									"value": "{{policy_code}}",
									"type": "text"
								},
								{
									"key": "group_uuid",
									"value": "ec467b52-4140-4bf4-8e26-8c28b249cbdb",
									"type": "text"
								},
								{
									"key": "type",
									"value": "t1",
									"type": "text"
								},
								{
									"key": "risk_level",
									"value": "1",
									"type": "text"
								},
								{
									"key": "solutions",
									"value": "fdpgkflg",
									"type": "text"
								},
								{
									"key": "create_user_uuid",
									"value": "{{user_uuid}}",
									"type": "text"
								},
								{
									"key": "status",
									"value": "1",
									"type": "text"
								},
								{
									"key": "os_type",
									"value": "1",
									"type": "text"
								},
								{
									"key": "baseline",
									"value": "1",
									"type": "text"
								},
								{
									"key": "run_mode",
									"value": "4",
									"type": "text"
								},
								{
									"key": "run_contents",
									"value": "systeminfo",
									"type": "text"
								},
								{
									"key": "consume_time",
									"value": "3000",
									"type": "text"
								},
								{
									"key": "asset_uuid",
									"value": "{{asset_uuid}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/policies/update",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"policies",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.12 获取所有策略的简要信息",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f03d584-0050-4232-99b5-5867aa484743",
								"exec": [
									"pm.test(\"get all policies\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/policies/all-brief",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"policies",
								"all-brief"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.13 策略名称是否唯一",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f03d584-0050-4232-99b5-5867aa484743",
								"exec": [
									"pm.test(\"get all policies\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/policies/check-unique-name?policy_name=Windows系统补丁检查&policy_uuid",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"policies",
								"check-unique-name"
							],
							"query": [
								{
									"key": "policy_name",
									"value": "Windows系统补丁检查"
								},
								{
									"key": "policy_uuid",
									"value": null,
									"description": "参数为空，表示全局检查名称唯一性；否则检查除自己外，其他策略是否使用该名称"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "5. 任务检测结果",
			"item": [
				{
					"name": "5.1 任务检测结果查询（所有）",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks/results/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"results",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.2 任务结果（统计图表）",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks/results/statistical",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"results",
								"statistical"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.5 单个任务执行信息",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks/results/brief?task_uuid={{task_uuid}}&project_uuid=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"results",
								"brief"
							],
							"query": [
								{
									"key": "task_uuid",
									"value": "{{task_uuid}}"
								},
								{
									"key": "project_uuid",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "5.6 任务执行结果(某批次)风险信息",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks/results/risks?exec_action_uuid=ab3e8ab8-695a-4958-9583-30c82788269a&risk_level=3",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"results",
								"risks"
							],
							"query": [
								{
									"key": "exec_action_uuid",
									"value": "ab3e8ab8-695a-4958-9583-30c82788269a",
									"description": "为空：所有的操作；不为空：指定操作UUID"
								},
								{
									"key": "risk_level",
									"value": "3",
									"description": "0：无风险；1~3级风险；99：所有一级以上的风险"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "5.7 策略运行结果的历史记录",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "begin_time",
									"value": "2019-05-31 16:14:49",
									"type": "text"
								},
								{
									"key": "end_time",
									"value": "2019-06-04 10:11:45",
									"type": "text"
								},
								{
									"key": "policy_uuid_list",
									"value": "87b907eb-234a-4409-825e-7d04acfaae40,e0db6657-9c89-4afc-9f55-5516030788ee,",
									"type": "text"
								},
								{
									"key": "scan_result",
									"value": "审计",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/tasks/results/history",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"results",
								"history"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.9 获取IEE漏洞数",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks/results/all-iie-vul",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"results",
								"all-iie-vul"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "6. 资产管理",
			"item": [
				{
					"name": "6.1 添加新资产",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
								"exec": [
									"var num = Math.ceil(Math.random() * 10000);",
									"pm.environment.set(\"asset_name\", \"asset_\" + num);",
									"pm.environment.set(\"asset_code\", \"C_\" + num);",
									"",
									"var ip1 = Math.ceil(Math.random() * 255) + \".\";",
									"var ip2 = Math.ceil(Math.random() * 255) + \".\";",
									"var ip3 = Math.ceil(Math.random() * 255) + \".\";",
									"var ip4 = Math.ceil(Math.random() * 255);",
									"pm.environment.set(\"asset_ip\", ip1 + ip2 + ip3 + ip4);",
									"pm.environment.set(\"asset_port\", Math.ceil(Math.random() * 100000));",
									"",
									"pm.environment.set(\"default_asset_user\", \"root\");",
									"pm.environment.set(\"default_asset_pwd\", \"root\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
								"exec": [
									"pm.test(\"add asset\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(0);",
									"    ",
									"    pm.environment.set(\"asset_uuid\", jsonData.payload.asset_uuid);",
									"    pm.environment.set(\"asset_name\", jsonData.payload.name);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "{{asset_name}}",
									"type": "text"
								},
								{
									"key": "code",
									"value": "{{asset_code}}",
									"type": "text"
								},
								{
									"key": "ip",
									"value": "{{asset_ip}}",
									"type": "text"
								},
								{
									"key": "port",
									"value": "{{asset_port}}",
									"type": "text"
								},
								{
									"key": "user",
									"value": "{{default_asset_user}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{default_asset_pwd}}",
									"type": "text"
								},
								{
									"key": "os_type",
									"value": "Ubuntu",
									"type": "text"
								},
								{
									"key": "os_ver",
									"value": "18.0.4",
									"type": "text"
								},
								{
									"key": "create_user_uuid",
									"value": "{{user_uuid}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/assets/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"assets",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "6.2 获取所有资产信息",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/assets/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"assets",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "6.3 更新资产数据",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
								"exec": [
									"var num = Math.ceil(Math.random() * 10000);",
									"pm.environment.set(\"asset_name\", \"new_\" + num);",
									"",
									"pm.environment.set(\"asset_user\", \"power_user\");",
									"pm.environment.set(\"asset_pwd\", \"root123\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
								"exec": [
									"pm.test(\"update asset\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(0);",
									"    ",
									"    pm.environment.set(\"asset_uuid\", jsonData.payload.uuid);",
									"    pm.environment.set(\"asset_name\", jsonData.payload.name);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "uuid",
									"value": "{{asset_uuid}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{asset_name}}",
									"type": "text"
								},
								{
									"key": "code",
									"value": "{{asset_code}}",
									"type": "text"
								},
								{
									"key": "ip",
									"value": "{{asset_ip}}",
									"type": "text"
								},
								{
									"key": "port",
									"value": "{{asset_port}}",
									"type": "text"
								},
								{
									"key": "user",
									"value": "{{asset_user}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{asset_pwd}}",
									"type": "text"
								},
								{
									"key": "os_type",
									"value": "Ubuntu",
									"type": "text"
								},
								{
									"key": "os_ver",
									"value": "18.0.4",
									"type": "text"
								},
								{
									"key": "create_user_uuid",
									"value": "{{user_uuid}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/assets/update",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"assets",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "6.4 删除资产",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "uuid",
									"value": "{{asset_uuid}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/assets/delete",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"assets",
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "6.5 资产名称是否唯一",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/assets/check-unique-name?asset_name=asset_74491&asset_uuid",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"assets",
								"check-unique-name"
							],
							"query": [
								{
									"key": "asset_name",
									"value": "asset_74491"
								},
								{
									"key": "asset_uuid",
									"value": null,
									"description": "参数为空，表示全局检查名称唯一性；否则检查除自己外，其他资产是否使用该名称"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "6.6 定时采集资产信息",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/assets/real-time-info?asset_uuid=506df28c-2ece-4fe3-8472-ff2ad25c88ba&action=1&info_types=CPU Usage,Mem Usage",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"assets",
								"real-time-info"
							],
							"query": [
								{
									"key": "asset_uuid",
									"value": "506df28c-2ece-4fe3-8472-ff2ad25c88ba"
								},
								{
									"key": "action",
									"value": "1",
									"description": "0: 停止采集；1: 开始采集"
								},
								{
									"key": "info_types",
									"value": "CPU Usage,Mem Usage"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "7. 任务执行统计",
			"item": [
				{
					"name": "7.1 查询所有的操作日志",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/actions/all-exec-logs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"actions",
								"all-exec-logs"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.2 统计执行次数（按任务）",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/actions/count-by-task",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"actions",
								"count-by-task"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.3 统计执行次数（按项目）",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/actions/count-by-project",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"actions",
								"count-by-project"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.4 统计执行次数（按操作人员）",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/actions/count-by-operator",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"actions",
								"count-by-operator"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.5 统计执行次数（按资产）",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/actions/count-by-asset",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"actions",
								"count-by-asset"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "8. 项目",
			"item": [
				{
					"name": "8.1 添加一个新的项目",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
								"exec": [
									"// var num = Math.ceil(Math.random() * 10000);",
									"// pm.environment.set(\"asset_name\", \"asset_\" + num);",
									"// pm.environment.set(\"asset_code\", \"C_\" + num);",
									"",
									"// var ip1 = Math.ceil(Math.random() * 255) + \".\";",
									"// var ip2 = Math.ceil(Math.random() * 255) + \".\";",
									"// var ip3 = Math.ceil(Math.random() * 255) + \".\";",
									"// var ip4 = Math.ceil(Math.random() * 255);",
									"// pm.environment.set(\"asset_ip\", ip1 + ip2 + ip3 + ip4);",
									"// pm.environment.set(\"asset_port\", Math.ceil(Math.random() * 100000));",
									"",
									"// pm.environment.set(\"default_asset_user\", \"root\");",
									"// pm.environment.set(\"default_asset_pwd\", \"root\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
								"exec": [
									"pm.test(\"add project\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(0);",
									"    ",
									"    pm.environment.set(\"project_uuid\", jsonData.payload.uuid);",
									"    pm.environment.set(\"project_name\", jsonData.payload.name);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "111",
									"type": "text"
								},
								{
									"key": "code",
									"value": "p111",
									"type": "text"
								},
								{
									"key": "tasks",
									"value": "[{\"uuid\":\"cb8c39e4-f666-4c1d-be73-9d039b398f1f\",\"code\":\"C_2715\",\"name\":\"task_2715\"},{\"uuid\":\"0022f9d3-a2b6-4e73-b128-8b883c76bdf3\",\"code\":\"TODO\",\"name\":\"task_2551\"},{\"uuid\":\"0b34cc5a-d99e-4ae5-aec5-ca3fbadc0dfb\",\"code\":\"C_4351\",\"name\":\"task_4351\"}]",
									"type": "text"
								},
								{
									"key": "output_mode",
									"value": "1",
									"type": "text"
								},
								{
									"key": "create_user_uuid",
									"value": "{{user_uuid}}",
									"type": "text"
								},
								{
									"key": "task_number",
									"value": "3",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/projects/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"projects",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "8.2 移除一个项目",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "uuid",
									"value": "{{project_uuid}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/projects/remove",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"projects",
								"remove"
							]
						}
					},
					"response": []
				},
				{
					"name": "8.3 获取所有的项目",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/projects/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"projects",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "8.4 根据UUID 获取项目",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/projects/get-project?uuid={{project_uuid}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"projects",
								"get-project"
							],
							"query": [
								{
									"key": "uuid",
									"value": "{{project_uuid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "8.5 更新项目",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
								"exec": [
									"// var num = Math.ceil(Math.random() * 10000);",
									"// pm.environment.set(\"asset_name\", \"asset_\" + num);",
									"// pm.environment.set(\"asset_code\", \"C_\" + num);",
									"",
									"// var ip1 = Math.ceil(Math.random() * 255) + \".\";",
									"// var ip2 = Math.ceil(Math.random() * 255) + \".\";",
									"// var ip3 = Math.ceil(Math.random() * 255) + \".\";",
									"// var ip4 = Math.ceil(Math.random() * 255);",
									"// pm.environment.set(\"asset_ip\", ip1 + ip2 + ip3 + ip4);",
									"// pm.environment.set(\"asset_port\", Math.ceil(Math.random() * 100000));",
									"",
									"// pm.environment.set(\"default_asset_user\", \"root\");",
									"// pm.environment.set(\"default_asset_pwd\", \"root\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
								"exec": [
									"pm.test(\"add project\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(0);",
									"    ",
									"    pm.environment.set(\"project_uuid\", jsonData.payload.uuid);",
									"    pm.environment.set(\"project_name\", jsonData.payload.name);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "uuid",
									"value": "{{project_uuid}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "111",
									"type": "text"
								},
								{
									"key": "code",
									"value": "p111",
									"type": "text"
								},
								{
									"key": "tasks",
									"value": "[{\"uuid\":\"cb8c39e4-f666-4c1d-be73-9d039b398f1f\",\"code\":\"C_2715\",\"name\":\"task_2715\"},{\"uuid\":\"0022f9d3-a2b6-4e73-b128-8b883c76bdf3\",\"code\":\"TODO\",\"name\":\"task_2551\"},{\"uuid\":\"0b34cc5a-d99e-4ae5-aec5-ca3fbadc0dfb\",\"code\":\"C_4351\",\"name\":\"task_4351\"}]",
									"type": "text"
								},
								{
									"key": "output_mode",
									"value": "1",
									"type": "text"
								},
								{
									"key": "create_user_uuid",
									"value": "{{user_uuid}}",
									"type": "text"
								},
								{
									"key": "task_number",
									"value": "3",
									"type": "text"
								},
								{
									"key": "process_flag",
									"value": "2",
									"type": "text"
								},
								{
									"key": "run_time_mode",
									"value": "1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/projects/update",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"projects",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "8.6 检查项目名称是否唯一",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/projects/check-unique-name?project_name=project1&project_uuid={{project_uuid}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"projects",
								"check-unique-name"
							],
							"query": [
								{
									"key": "project_name",
									"value": "project1"
								},
								{
									"key": "project_uuid",
									"value": "{{project_uuid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "9. 系统日志",
			"item": [
				{
					"name": "9.1 添加新的系统日志",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "type",
									"value": "4",
									"description": "日志记录的类型：\n1：成功操作；\n2：失败操作；\n3：系统错误（严重错误）；\n4：一般信息；\n5：异常信息（一般异常）；\n6：警告信息",
									"type": "text"
								},
								{
									"key": "title",
									"value": "登录",
									"type": "text"
								},
								{
									"key": "contents",
									"value": "登录成功",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/system-logs/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"system-logs",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "9.2 获取所有系统日志",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/system-logs/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"system-logs",
								"all"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "10. 基线核查",
			"item": [
				{
					"name": "10.1 查询基线",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/baseline-check/query-baselines?level=4",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"baseline-check",
								"query-baselines"
							],
							"query": [
								{
									"key": "level",
									"value": "4",
									"description": "<= 0时，表示查询所有基线，>0时，查询指定等级的基线"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "10.2 添加扫描记录",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "asset_uuid",
									"value": "{{asset_uuid}}",
									"description": "日志记录的类型：\n1：成功操作；\n2：失败操作；\n3：系统错误（严重错误）；\n4：一般信息；\n5：异常信息（一般异常）；\n6：警告信息",
									"type": "text"
								},
								{
									"key": "scan_info",
									"value": "{}",
									"type": "text"
								},
								{
									"key": "creator_uuid",
									"value": "{{user_uuid}}",
									"type": "text"
								},
								{
									"key": "base_line",
									"value": "2",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/baseline-check/add-scan-data",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"baseline-check",
								"add-scan-data"
							]
						}
					},
					"response": []
				},
				{
					"name": "10.3 查询所有扫描记录",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/baseline-check/all-scan-records?detail_level=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"baseline-check",
								"all-scan-records"
							],
							"query": [
								{
									"key": "detail_level",
									"value": "1",
									"description": "0: 基本记录信息；1: 联合\"资产名称\" 和 \"IP用户姓名/账号\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "10.4 查询资产扫描信息",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/baseline-check/scan-info?scan_uuid=b0619854-d2aa-455b-93c0-b8a9cbb52f72",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"baseline-check",
								"scan-info"
							],
							"query": [
								{
									"key": "scan_uuid",
									"value": "b0619854-d2aa-455b-93c0-b8a9cbb52f72"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "10.5 新建核查结果记录",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "base_line",
									"value": "1",
									"type": "text"
								},
								{
									"key": "asset_uuid",
									"value": "{{asset_uuid}}",
									"description": "日志记录的类型：\n1：成功操作；\n2：失败操作；\n3：系统错误（严重错误）；\n4：一般信息；\n5：异常信息（一般异常）；\n6：警告信息",
									"type": "text"
								},
								{
									"key": "scan_uuid",
									"value": "1111",
									"type": "text"
								},
								{
									"key": "config_info",
									"value": "444",
									"type": "text"
								},
								{
									"key": "risk_level",
									"value": "1",
									"type": "text"
								},
								{
									"key": "risk_desc",
									"value": "aa",
									"type": "text"
								},
								{
									"key": "solution",
									"value": "aa",
									"type": "text"
								},
								{
									"key": "creator_uuid",
									"value": "{{user_uuid}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/baseline-check/add-check-result",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"baseline-check",
								"add-check-result"
							]
						}
					},
					"response": []
				},
				{
					"name": "10.6 查询核查结果",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/baseline-check/check-result?scan_uuid=f8c4a22a-a144-45b6-bad2-104e47f5a6d6&result_uuid=&group=startup",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"baseline-check",
								"check-result"
							],
							"query": [
								{
									"key": "scan_uuid",
									"value": "f8c4a22a-a144-45b6-bad2-104e47f5a6d6",
									"description": "scanUuid 和 resultUuid 二选一，不能都为空"
								},
								{
									"key": "result_uuid",
									"value": ""
								},
								{
									"key": "group",
									"value": "startup"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "10.7 运行资产核查",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/baseline-check/run-asset-check?asset_uuid={{asset_uuid}}&base_line=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"baseline-check",
								"run-asset-check"
							],
							"query": [
								{
									"key": "asset_uuid",
									"value": "{{asset_uuid}}"
								},
								{
									"key": "base_line",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "10.9 初始化基线模板数据",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/baseline-check/init-baselines",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"baseline-check",
								"init-baselines"
							]
						}
					},
					"response": []
				},
				{
					"name": "10.11 获取资产最近一次核查统计数据",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/baseline-check/asset-recent-check-stat?asset_uuid={{asset_uuid}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"baseline-check",
								"asset-recent-check-stat"
							],
							"query": [
								{
									"key": "asset_uuid",
									"value": "{{asset_uuid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "A. 字典表",
			"item": [
				{
					"name": "51. 策略分组",
					"item": [
						{
							"name": "51.1 获取所有分组",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4f03d584-0050-4232-99b5-5867aa484743",
										"exec": [
											"pm.test(\"get all groups\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/policy-groups/all",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policy-groups",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "51.2 添加新分组",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"var num = Math.ceil(Math.random() * 10000);",
											"pm.environment.set(\"group_name\", \"分组-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add group\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    pm.environment.set(\"group_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "{{group_name}}",
											"type": "text"
										},
										{
											"key": "code",
											"value": "C111",
											"type": "text"
										},
										{
											"key": "type",
											"value": "99",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policy-groups/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policy-groups",
										"add"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"description": "包括：分组等字典表"
		},
		{
			"name": "B. 节点配置收集服务",
			"item": [
				{
					"name": "B.1 测试任务运行",
					"item": [
						{
							"name": "B.1.1 运行指定UUID任务",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8191/nodes/manage/run-project-task?project_uuid=db3f58ff-9c3d-4a85-b9d7-8fe6d7a1ec0e&task_uuid=32f4c7db-5ff1-4b16-b640-c57845c81fb2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "",
									"path": [
										"nodes",
										"manage",
										"run-project-task"
									],
									"query": [
										{
											"key": "project_uuid",
											"value": "db3f58ff-9c3d-4a85-b9d7-8fe6d7a1ec0e",
											"description": "默认项目UUID：db3f58ff-9c3d-4a85-b9d7-8fe6d7a1ec0e"
										},
										{
											"key": "task_uuid",
											"value": "32f4c7db-5ff1-4b16-b640-c57845c81fb2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "B.1.2 OS信息",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:/test/os",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "",
									"path": [
										"test",
										"os"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "C. 添加策略数据",
			"item": [
				{
					"name": "C.1 Win系统服务策略",
					"item": [
						{
							"name": "C.1.1 Win系统配置信息",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Windows系统配置信息",
											"type": "text"
										},
										{
											"key": "code",
											"value": "WindowsSystemInfo",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "6c69d5e6-9f53-4ed9-b4b8-d76392548ed5",
											"description": "分组：Windows系统服务",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "#!/usr/bin/python3.7\n# coding=utf-8\nimport os\n# import sys\n\n\ndef getValue(t):\n    try:\n        return t[t.index(':') + 1:].strip()\n    except ValueError:\n        return ''\n\n\ndef getSCValue(line):\n    try:\n        return line[3].split(\":\")[1].strip()\n    except ValueError:\n        return 'Not Installed'\n\n\ndef process(info):\n    output = os.system(\"systeminfo >system_info.log\")\n    line_array = open(\"system_info.log\", \"r\").readlines()\n\n    info[\"OS Host Name\"] = getValue(line_array[1])\n    info[\"OS Name\"] = getValue(line_array[2])\n    info[\"OS Version\"] = getValue(line_array[3])\n    info[\"OS Manufacturer\"] = getValue(line_array[4])\n    info[\"OS Configuration\"] = getValue(line_array[5])\n    info[\"OS Build Type\"] = getValue(line_array[6])\n    info[\"OS Registered Owner\"] = getValue(line_array[7])\n    info[\"OS Registered Organization\"] = getValue(line_array[8])\n    info[\"OS Product ID\"] = getValue(line_array[9])\n    info[\"OS Original Install Date\"] = getValue(line_array[10])\n    info[\"System Boot Time\"] = getValue(line_array[11])\n    info[\"System Manufacturer\"] = getValue(line_array[12])\n    info[\"System Model\"] = getValue(line_array[13])\n    info[\"System Type\"] = getValue(line_array[14])\n\n    line_num = 16\n    for i in range(line_num, len(line_array)):\n        if line_array[i][0] != ' ':\n            line_num = i\n            break\n    info[\"System Processor(s)\"] = [i.strip() for i in line_array[16:line_num]]\n\n    info[\"System BIOS Version\"] = getValue(line_array[line_num])\n    line_num = line_num + 1\n\n    info[\"OS Windows Directory\"] = getValue(line_array[line_num])\n    line_num = line_num + 1\n\n    info[\"System Directory\"] = getValue(line_array[line_num])\n    line_num = line_num + 1\n\n    info[\"System Boot Device\"] = getValue(line_array[line_num])\n    line_num = line_num + 1\n\n    info[\"OS Locale\"] = getValue(line_array[line_num])\n    line_num = line_num + 1\n\n    info[\"OS Input Locale\"] = getValue(line_array[line_num])\n    line_num = line_num + 1\n\n    info[\"OS Time Zone\"] = getValue(line_array[line_num])\n    line_num = line_num + 1\n\n    info[\"System Total Physical Memory\"] = getValue(line_array[line_num])\n    line_num = line_num + 1\n\n    info[\"System Available Physical Memory\"] = getValue(line_array[line_num])\n    line_num = line_num + 1\n\n    info[\"OS Virtual Memory: Max Size\"] = getValue(line_array[line_num])\n    line_num = line_num + 1\n\n    info[\"OS Virtual Memory: Available\"] = getValue(line_array[line_num])\n    line_num = line_num + 1\n\n    info[\"OS Virtual Memory: In Use\"] = getValue(line_array[line_num])\n    line_num = line_num + 1\n\n    info[\"OS Page File Location(s)\"] = getValue(line_array[line_num])\n    line_num = line_num + 1\n\n    info[\"OS Domain\"] = getValue(line_array[line_num])\n    line_num = line_num + 1\n\n    info[\"OS Logon Server\"] = getValue(line_array[line_num])\n\n    line_num = line_num + 2\n\n    end_num = line_num\n    for i in range(line_num, len(line_array)):\n        if line_array[i][0] != ' ':\n            end_num = i\n            break\n    info[\"OS Hotfix(s)\"] = [i.strip() for i in line_array[line_num:end_num]]\n\n    output = os.system(\"sc query wscsvc >system_Alerter.log\")\n    info['System Alerter'] = getSCValue(open(\"system_Alerter.log\", 'r').readlines())\n\n    output = os.system(\"sc query wuauserv >system_autoupdate.log\")\n    info['System Autoupdate'] = getSCValue(open(\"system_autoupdate.log\", 'r').readlines())\n\n    os.remove('system_info.log')\n    os.remove('system_Alerter.log')\n    os.remove('system_autoupdate.log')\n\n    return\n\n\ndef analyze(result):\n    info = result['info']\n    fix_num = len(info['OS Hotfix(s)'])\n    if fix_num == 0:\n        result['risk_level'] = 3\n        result['risk_desc'] = '未安装系统补丁，有较严重的安全隐患'\n        result['solution'] = '配置Windows Update，连接互联网，更新系统修补程序。'\n    elif 0 < fix_num < 10:\n        result['risk_level'] = 1\n        result['risk_desc'] = '系统补丁过少，存在安全风险'\n        result['solution'] = '配置Windows Update，连接互联网，更新系统修补程序。'\n    else:\n        result['risk_level'] = 0\n        result['risk_desc'] = '系统信息正常'\n        result['solution'] = '无'\n    return\n\n\nif __name__ == '__main__':\n    info = {}\n    process(info)\n\n    result = {'info': info}\n    analyze(result)\n\n    print(result)\n",
											"description": "windows/system_info.py",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "5000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "C.2 Win系统补丁",
					"item": [
						{
							"name": "C.2.1 Win系统补丁检查",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Windows系统补丁检查",
											"type": "text"
										},
										{
											"key": "code",
											"value": "WindowsSystemPatch",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "ec467b52-4140-4bf4-8e26-8c28b249cbdb",
											"description": "分组：Windows系统补丁安装",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "#!/usr/bin/python3.7\n# coding=utf-8\nimport os\nimport re\n# import sys\n\n\ndef getValue(t):\n    try:\n        return t[t.index(':') + 1:].strip()\n    except ValueError:\n        return ''\n\n\ndef noPatch(result):\n    result['info'] = '补丁列表：\\n[ 空 ]'\n    result['risk_level'] = 3\n    result['risk_desc'] = '未安装系统补丁，有较严重的安全隐患'\n    result['solution'] = '配置Windows Update，连接互联网，更新系统修补程序。'\n\n\ndef process(result):\n    output = os.system(\"systeminfo >system_info.log\")\n    line_array = open(\"system_info.log\", \"r\").readlines()\n\n    line_index = 33\n\n    # end_index = start_index\n    if line_array[line_index].find('暂缺') >= 0:\n        noPatch(result)\n    else:\n        match_obj = re.findall(r\"\\d+\\.?\\d*\", line_array[line_index])\n        if len(match_obj) == 0:\n            noPatch(result)\n        else:\n            patch_count = int(match_obj[0])\n            result['info'] = '补丁列表(' + str(patch_count) + '个)：\\n'\n            for index in range(line_index + 1, len(line_array)):\n                if line_array[index].find(']: KB') < 0:\n                    break\n                result['info'] += line_array[index]\n            if 0 < patch_count < 10:\n                result['risk_level'] = 1\n                result['risk_desc'] = '系统补丁过少，存在安全风险'\n                result['solution'] = '配置Windows Update，连接互联网，更新系统修补程序。'\n            else:\n                # TODO: 添加检查最新补丁\n                result['risk_level'] = 0\n                result['risk_desc'] = '补丁安装正常'\n                result['solution'] = '无'\n\n    os.remove('system_info.log')\n\n    return\n\n\nif __name__ == '__main__':\n    r = {}\n    process(r)\n    print(r)\n",
											"description": "windows/patch_info.py",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "5000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "C.3 Win防火墙安全",
					"item": [
						{
							"name": "C.3.1 Win防火墙状态",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Windows防火墙状态",
											"type": "text"
										},
										{
											"key": "code",
											"value": "WindowsFirewallStatus",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "ddd101d7-5e2a-4cee-a47b-e59e4a92e94a",
											"description": "分组：系统防火墙安全策略",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "#!/usr/bin/python3.7\n# coding=utf-8\nimport os\nimport json\n\n\ndef getValue(t):\n    return t.split(\"=\")[-1].strip()\n\n\ndef process(info):\n    r = os.system(\"netsh firewall show state > firewall.log\")\n    line_array = open(\"firewall.log\", 'r').readlines()\n\n    # 命令执行，部分结果如下：\n\n    # 操作模式 = 启用              (第4行)\n    # 例外模式 = 启用\n    # 多播 / 广播响应模式 = 禁用\n    # 通知模式 = 禁用\n    # 组策略版本 = Windows Defender 防火墙\n    # 远程管理模式 = 禁用\n    #\n    # 所有网络接口上的端口当前均为打开状态:\n    # 端口      协议      版本      程序        （第12行）\n    # -------------------------------------------------------------------\n    # 当前没有在所有网络接口上打开的端口。\n    #\n    # 重要信息: 已成功执行命令。\n    info[\"Firewall Operational mode\"] = getValue(line_array[4])\n    info[\"Firewall Exception mode\"] = getValue(line_array[5])\n    info[\"Firewall Multi/Broadcast mode\"] = getValue(line_array[6])\n    info[\"Firewall Notification mode\"] = getValue(line_array[7])\n\n    os.remove('firewall.log')\n\n    return\n\n\ndef analyze(result):\n    info = result['info']\n    if info['Firewall Operational mode'] != '启用':\n        result['risk_level'] = 3\n        result['risk_desc'] = '防火墙未开启，系统不能有效保障网络安全，也不能对网络存取和访问进行有效的监控审计，系统和用户的信息资料有较大的外泄风险。'\n        result['solution'] = '请使用如下Windows命令开启防火墙：\\n\\tnetsh firewall set opmode mode=enable'\n    elif info['Firewall Notification mode'] != '启用':\n        result['risk_level'] = 1\n        result['risk_desc'] = '防火墙未开启通知模式，在阻止应用访问网络时，可能会给用户带来困扰；同时，开启通知模式也有利于用户了解当前系统可能存在的安全隐患。'\n        result['solution'] = '请使用如下Windows命令开启防火墙：\\n\\tnetsh firewall set notifications enable'\n    else:\n        result['risk_level'] = 0\n        result['risk_desc'] = '防火墙已正确开启'\n        result['solution'] = '无'\n\n    return\n\n\nif __name__ == '__main__':\n    info = {}\n    process(info)\n\n    result = {'info': info}\n    analyze(result)\n    print(result)\n",
											"description": "windows/firewall_mode.py",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "2000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "C.3.2 Win防火墙端口规则",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Windows防火墙端口规则",
											"type": "text"
										},
										{
											"key": "code",
											"value": "WindowsFirewallPortsRules",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "ddd101d7-5e2a-4cee-a47b-e59e4a92e94a",
											"description": "分组：系统防火墙安全策略",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "#!/usr/bin/python3.7\n# coding=utf-8\nimport os\nimport json\n\n\ndef getValue(t):\n    return t.split(\"=\")[-1].strip()\n\n\ndef process(info):\n    r = os.system(\"netsh firewall show state > firewall.log\")\n    line_array = open(\"firewall.log\", 'r').readlines()\n\n    # 命令执行，部分结果如下：\n\n    # 操作模式 = 启用              (第4行)\n    # 例外模式 = 启用\n    # 多播 / 广播响应模式 = 禁用\n    # 通知模式 = 禁用\n    # 组策略版本 = Windows Defender 防火墙\n    # 远程管理模式 = 禁用\n    #\n    # 所有网络接口上的端口当前均为打开状态:\n    # 端口      协议      版本      程序        （第12行）\n    # -------------------------------------------------------------------\n    # 当前没有在所有网络接口上打开的端口。\n    #\n    # 重要信息: 已成功执行命令。\n    start_index = 14\n    port_state = getValue(line_array[start_index])\n    if port_state.find(\"当前没有在所有网络接口上打开的端口\") >= 0:\n        info[\"Firewall All-Open Ports Exist\"] = 'false'\n        info[\"All-Open Ports List\"] = []\n    else:\n        info[\"Firewall All-Open Ports Exist\"] = 'true'\n        end_index = start_index\n        for index in range(start_index, len(line_array)):\n            if line_array[index][0] == ' ':\n                end_index = index\n                break\n        info[\"All-Open Ports List\"] = [line.strip() for line in line_array[start_index: end_index]]\n\n    os.remove('firewall.log')\n\n    # 用于测试\n    # info[\"Firewall All-Open Ports Exist\"] = 'true'\n    # info[\"All-Open Ports List\"] = [\n    #     \"9019    UDP    任何    (null)\\n\",\n    #     \"8080    TCP    任何    (null)\\n\",\n    #     \"245     UDP    任何    (null)\\n\", ]\n\n    return\n\n\ndef analyze(result):\n    info = result['info']\n    if info['Firewall All-Open Ports Exist'] == 'true':\n        result['risk_level'] = 2\n        result['risk_desc'] = '端口规则存在安全风险\\n'\n        result['risk_desc'] += '端口   协议  版本  程序\\n'\n        port_list = info[\"All-Open Ports List\"]\n        for index in range(0, len(port_list)):\n            result['risk_desc'] += port_list[index]\n        result['solution'] = '请检查防火墙的端口规则，对需要限制的端口运行设置命令：netsh firewall add/set portopening。'\n    else:\n        result['risk_level'] = 0\n        result['risk_desc'] = '未发现无限制打开的端口。'\n        result['solution'] = '无'\n\n    return\n\n\nif __name__ == '__main__':\n    info = {}\n    process(info)\n\n    result = {'info': info}\n    analyze(result)\n    print(result)\n",
											"description": "windows/firewall_open_ports.py",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "2000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "C.4 Win口令配置",
					"item": [
						{
							"name": "C.4.1 Win口令长度",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Windows口令长度要求",
											"type": "text"
										},
										{
											"key": "code",
											"value": "WindowsPwdMinLength",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "97309d94-0b9f-4d7e-8343-f14259c9b05c",
											"description": "分组：Windows口令配置",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "#!/usr/bin/python3.7\n# coding=utf-8\n\nimport configparser\nimport codecs\nimport os\n\n# 本脚本用于多条密码安全策略\nSCRIPT_USAGE = 1    # 密码长度不能小于 MIN_PWD_LEN （8）\n# SCRIPT_USAGE = 2    # 密码复杂度（0 -- 65536）\n# SCRIPT_USAGE = 3    # 强制密码历史：新密码设定时的历史唯一性检查，检查几个历史密码 （0 -- 65536）\n# SCRIPT_USAGE = 4  # 密码寿命：最小密码寿命设置为1天，最大密码寿命设置为30--90天\n\n# refer to the page:\n# https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-gpsb/2cd39c97-97cd-4859-a7b4-1229dad5f53d\n# https://blog.csdn.net/yongping8204/article/details/7471627\nINVALID = '-1'\nMIN_PWD_LEN = 8\nMIN_PWD_HIS_SIZE = 5\n\n\nclass Config:\n    def __init__(self, path):\n        self.path = path\n        self.cf = configparser.ConfigParser()\n        self.cf.read_file(codecs.open(self.path, \"r\", \"utf_16\"))\n        s = self.cf.sections()\n\n    def get(self, field, key):\n        try:\n            result = str(self.cf.get(field, key))\n        except:\n            return INVALID\n        return result\n\n    def set(self, field, key, value):\n        self.cf.set(field, key, value)\n        self.cf.write(open(self.path, 'w'))\n        return True\n\n\ndef process(info):\n    output = os.system(\"secedit /export /cfg Password.ini\")\n\n    cf = Config(\"Password.ini\")\n\n    info[\"PWD MinimumPasswordAge\"] = cf.get(\"System Access\", \"MinimumPasswordAge\")\n    info[\"PWD MaximumPasswordAge\"] = cf.get(\"System Access\", \"MaximumPasswordAge\")\n    info[\"PWD MinimumPasswordLength\"] = cf.get(\"System Access\", \"MinimumPasswordLength\")\n    info[\"PWD PasswordComplexity\"] = cf.get(\"System Access\", \"PasswordComplexity\")\n    info[\"PWD PasswordHistorySize\"] = cf.get(\"System Access\", \"PasswordHistorySize\")\n\n    info[\"Account LockoutBadCount\"] = cf.get(\"System Access\", \"LockoutBadCount\")\n    info[\"Account LockoutDuration\"] = cf.get(\"System Access\", \"LockoutDuration\")\n    info[\"Account ResetLockoutCount\"] = cf.get(\"System Access\", \"ResetLockoutCount\")\n    info[\"Account NewAdministratorName\"] = cf.get(\"System Access\", \"NewAdministratorName\")\n    info[\"Account Guest Active\"] = cf.get(\"System Access\", \"EnableGuestAccount\")\n\n    info[\"Audit AuditLogonEvents\"] = cf.get(\"Event Audit\", \"AuditLogonEvents\")\n    info[\"Audit AuditSystemEvents\"] = cf.get(\"Event Audit\", \"AuditSystemEvents\")\n    info[\"Audit AuditObjectAccess\"] = cf.get(\"Event Audit\", \"AuditObjectAccess\")\n    info[\"Audit AuditPrivilegeUse\"] = cf.get(\"Event Audit\", \"AuditPrivilegeUse\")\n    info[\"Audit AuditPolicyChange\"] = cf.get(\"Event Audit\", \"AuditPolicyChange\")\n    info[\"Audit AuditAccountManage\"] = cf.get(\"Event Audit\", \"AuditAccountManage\")\n    info[\"Audit AuditProcessTracking\"] = cf.get(\"Event Audit\", \"AuditProcessTracking\")\n    info[\"Audit AuditDSAccess\"] = cf.get(\"Event Audit\", \"AuditDSAccess\")\n    info[\"Audit AuditAccountLogon\"] = cf.get(\"Event Audit\", \"AuditAccountLogon\")\n\n    info[\"Log AuditLogonEvents\"] = cf.get(\"Event Audit\", \"AuditLogonEvents\")\n\n    os.remove('Password.ini')\n\n\ndef analyze(result):\n    info = result['info']\n    result['risk_desc'] = ''\n    result['solution'] = ''\n\n    # 密码长度不能小于 MIN_PWD_LEN （8）\n    if SCRIPT_USAGE == 1:\n        if int(info[\"PWD MinimumPasswordLength\"]) < MIN_PWD_LEN:\n            result['risk_level'] = 3\n            result['risk_desc'] = '允许设置的密码长度太短'\n            result['solution'] = '设置密码长度最少为' + str(MIN_PWD_LEN) + '位。'\n        else:\n            result['risk_level'] = 0\n            result['risk_desc'] = '密码长度符合要求'\n            result['solution'] = '无'\n\n    # 密码复杂度（0 -- 65536）\n    if SCRIPT_USAGE == 2:\n        if int(info[\"PWD PasswordComplexity\"]) < 1:\n            result['risk_level'] = 3\n            result['risk_desc'] = '没有限制密码的复杂度'\n            result['solution'] = '密码不能含用户名，需包含大写字母、小写字母、数字及特殊字符。'\n        else:\n            result['risk_level'] = 0\n            result['risk_desc'] = '密码复杂度符合要求'\n            result['solution'] = '无'\n\n    # 强制密码历史：新密码设定时的历史唯一性检查，检查几个历史密码 （0 -- 65536）\n    if SCRIPT_USAGE == 3:\n        if int(info[\"PWD PasswordHistorySize\"]) < MIN_PWD_HIS_SIZE:\n            result['risk_level'] = 3\n            result['risk_desc'] = '强制密码历史不符合要求，当前系统设置为' + info[\"PWD PasswordHistorySize\"] + '个记住密码'\n            result['solution'] = '设置强制密码历史数最少为' + str(MIN_PWD_HIS_SIZE) + '个记住密码。'\n        else:\n            result['risk_level'] = 0\n            result['risk_desc'] = '强制密码历史符合要求'\n            result['solution'] = '无'\n\n    # 密码寿命：最小密码寿命设置为1天，最大密码寿命设置为30--90天\n    if SCRIPT_USAGE == 4:\n        if 30 <= int(info[\"PWD MaximumPasswordAge\"]) <= 90:\n            if int(info[\"PWD MinimumPasswordAge\"]) == 1:\n                result['risk_level'] = 0\n                result['risk_desc'] = '口令寿命符合要求'\n                result['solution'] = '无'\n            else:\n                result['risk_level'] = 1\n                result['risk_desc'] = '最小密码寿命设置不合理，当前设置为' + info[\"PWD MinimumPasswordAge\"] + '天'\n                result['solution'] = '设置最小密码寿命为1天。'\n        else:\n            result['risk_level'] = 2\n            result['risk_desc'] = '最大密码寿命不符合要求，当前设置为' + info[\"PWD MaximumPasswordAge\"] + '天'\n            result['solution'] = '设置最大密码寿命为30到90天。'\n\n    # 口令策略配置问题的解决方案增加系统策略设置路径\n    if result['risk_level'] != 0:\n        result['solution'] += '\\n策略设置路径为：Computer Configuration\\\\Windows Settings\\\\Security Settings\\\\Account ' \\\n                              'Policies\\\\Password Policy '\n\n\nif __name__ == '__main__':\n    info = {}\n    process(info)\n\n    result = {'info': info}\n    analyze(result)\n\n    print(result)\n",
											"description": "windows/pwd_policy.py, 设置SCRIPT_USAGE = 1",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "C.4.2 Win口令复杂度",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Windows口令复杂度要求",
											"type": "text"
										},
										{
											"key": "code",
											"value": "WindowsPwdComplexity",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "97309d94-0b9f-4d7e-8343-f14259c9b05c",
											"description": "分组：Windows口令配置",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "#!/usr/bin/python3.7\n# coding=utf-8\n\nimport configparser\nimport codecs\nimport os\n\n# 本脚本用于多条密码安全策略\n# SCRIPT_USAGE = 1    # 密码长度不能小于 MIN_PWD_LEN （8）\nSCRIPT_USAGE = 2    # 密码复杂度（0 -- 65536）\n# SCRIPT_USAGE = 3    # 强制密码历史：新密码设定时的历史唯一性检查，检查几个历史密码 （0 -- 65536）\n# SCRIPT_USAGE = 4  # 密码寿命：最小密码寿命设置为1天，最大密码寿命设置为30--90天\n\n# refer to the page:\n# https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-gpsb/2cd39c97-97cd-4859-a7b4-1229dad5f53d\n# https://blog.csdn.net/yongping8204/article/details/7471627\nINVALID = '-1'\nMIN_PWD_LEN = 8\nMIN_PWD_HIS_SIZE = 5\n\n\nclass Config:\n    def __init__(self, path):\n        self.path = path\n        self.cf = configparser.ConfigParser()\n        self.cf.read_file(codecs.open(self.path, \"r\", \"utf_16\"))\n        s = self.cf.sections()\n\n    def get(self, field, key):\n        try:\n            result = str(self.cf.get(field, key))\n        except:\n            return INVALID\n        return result\n\n    def set(self, field, key, value):\n        self.cf.set(field, key, value)\n        self.cf.write(open(self.path, 'w'))\n        return True\n\n\ndef process(info):\n    output = os.system(\"secedit /export /cfg Password.ini\")\n\n    cf = Config(\"Password.ini\")\n\n    info[\"PWD MinimumPasswordAge\"] = cf.get(\"System Access\", \"MinimumPasswordAge\")\n    info[\"PWD MaximumPasswordAge\"] = cf.get(\"System Access\", \"MaximumPasswordAge\")\n    info[\"PWD MinimumPasswordLength\"] = cf.get(\"System Access\", \"MinimumPasswordLength\")\n    info[\"PWD PasswordComplexity\"] = cf.get(\"System Access\", \"PasswordComplexity\")\n    info[\"PWD PasswordHistorySize\"] = cf.get(\"System Access\", \"PasswordHistorySize\")\n\n    info[\"Account LockoutBadCount\"] = cf.get(\"System Access\", \"LockoutBadCount\")\n    info[\"Account LockoutDuration\"] = cf.get(\"System Access\", \"LockoutDuration\")\n    info[\"Account ResetLockoutCount\"] = cf.get(\"System Access\", \"ResetLockoutCount\")\n    info[\"Account NewAdministratorName\"] = cf.get(\"System Access\", \"NewAdministratorName\")\n    info[\"Account Guest Active\"] = cf.get(\"System Access\", \"EnableGuestAccount\")\n\n    info[\"Audit AuditLogonEvents\"] = cf.get(\"Event Audit\", \"AuditLogonEvents\")\n    info[\"Audit AuditSystemEvents\"] = cf.get(\"Event Audit\", \"AuditSystemEvents\")\n    info[\"Audit AuditObjectAccess\"] = cf.get(\"Event Audit\", \"AuditObjectAccess\")\n    info[\"Audit AuditPrivilegeUse\"] = cf.get(\"Event Audit\", \"AuditPrivilegeUse\")\n    info[\"Audit AuditPolicyChange\"] = cf.get(\"Event Audit\", \"AuditPolicyChange\")\n    info[\"Audit AuditAccountManage\"] = cf.get(\"Event Audit\", \"AuditAccountManage\")\n    info[\"Audit AuditProcessTracking\"] = cf.get(\"Event Audit\", \"AuditProcessTracking\")\n    info[\"Audit AuditDSAccess\"] = cf.get(\"Event Audit\", \"AuditDSAccess\")\n    info[\"Audit AuditAccountLogon\"] = cf.get(\"Event Audit\", \"AuditAccountLogon\")\n\n    info[\"Log AuditLogonEvents\"] = cf.get(\"Event Audit\", \"AuditLogonEvents\")\n\n    os.remove('Password.ini')\n\n\ndef analyze(result):\n    info = result['info']\n    result['risk_desc'] = ''\n    result['solution'] = ''\n\n    # 密码长度不能小于 MIN_PWD_LEN （8）\n    if SCRIPT_USAGE == 1:\n        if int(info[\"PWD MinimumPasswordLength\"]) < MIN_PWD_LEN:\n            result['risk_level'] = 3\n            result['risk_desc'] = '允许设置的密码长度太短'\n            result['solution'] = '设置密码长度最少为' + str(MIN_PWD_LEN) + '位。'\n        else:\n            result['risk_level'] = 0\n            result['risk_desc'] = '密码长度符合要求'\n            result['solution'] = '无'\n\n    # 密码复杂度（0 -- 65536）\n    if SCRIPT_USAGE == 2:\n        if int(info[\"PWD PasswordComplexity\"]) < 1:\n            result['risk_level'] = 3\n            result['risk_desc'] = '没有限制密码的复杂度'\n            result['solution'] = '密码不能含用户名，需包含大写字母、小写字母、数字及特殊字符。'\n        else:\n            result['risk_level'] = 0\n            result['risk_desc'] = '密码复杂度符合要求'\n            result['solution'] = '无'\n\n    # 强制密码历史：新密码设定时的历史唯一性检查，检查几个历史密码 （0 -- 65536）\n    if SCRIPT_USAGE == 3:\n        if int(info[\"PWD PasswordHistorySize\"]) < MIN_PWD_HIS_SIZE:\n            result['risk_level'] = 3\n            result['risk_desc'] = '强制密码历史不符合要求，当前系统设置为' + info[\"PWD PasswordHistorySize\"] + '个记住密码'\n            result['solution'] = '设置强制密码历史数最少为' + str(MIN_PWD_HIS_SIZE) + '个记住密码。'\n        else:\n            result['risk_level'] = 0\n            result['risk_desc'] = '强制密码历史符合要求'\n            result['solution'] = '无'\n\n    # 密码寿命：最小密码寿命设置为1天，最大密码寿命设置为30--90天\n    if SCRIPT_USAGE == 4:\n        if 30 <= int(info[\"PWD MaximumPasswordAge\"]) <= 90:\n            if int(info[\"PWD MinimumPasswordAge\"]) == 1:\n                result['risk_level'] = 0\n                result['risk_desc'] = '口令寿命符合要求'\n                result['solution'] = '无'\n            else:\n                result['risk_level'] = 1\n                result['risk_desc'] = '最小密码寿命设置不合理，当前设置为' + info[\"PWD MinimumPasswordAge\"] + '天'\n                result['solution'] = '设置最小密码寿命为1天。'\n        else:\n            result['risk_level'] = 2\n            result['risk_desc'] = '最大密码寿命不符合要求，当前设置为' + info[\"PWD MaximumPasswordAge\"] + '天'\n            result['solution'] = '设置最大密码寿命为30到90天。'\n\n    # 口令策略配置问题的解决方案增加系统策略设置路径\n    if result['risk_level'] != 0:\n        result['solution'] += '\\n策略设置路径为：Computer Configuration\\\\Windows Settings\\\\Security Settings\\\\Account ' \\\n                              'Policies\\\\Password Policy '\n\n\nif __name__ == '__main__':\n    info = {}\n    process(info)\n\n    result = {'info': info}\n    analyze(result)\n\n    print(result)\n",
											"description": "windows/pwd_policy.py, 设置SCRIPT_USAGE = 2",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "C.4.3 Win口令强制密码历史",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Windows口令强制密码历史",
											"type": "text"
										},
										{
											"key": "code",
											"value": "WindowsPwdHistorySize",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "97309d94-0b9f-4d7e-8343-f14259c9b05c",
											"description": "分组：Windows口令配置",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "#!/usr/bin/python3.7\n# coding=utf-8\n\nimport configparser\nimport codecs\nimport os\n\n# 本脚本用于多条密码安全策略\n# SCRIPT_USAGE = 1    # 密码长度不能小于 MIN_PWD_LEN （8）\n# SCRIPT_USAGE = 2    # 密码复杂度（0 -- 65536）\nSCRIPT_USAGE = 3    # 强制密码历史：新密码设定时的历史唯一性检查，检查几个历史密码 （0 -- 65536）\n# SCRIPT_USAGE = 4  # 密码寿命：最小密码寿命设置为1天，最大密码寿命设置为30--90天\n\n# refer to the page:\n# https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-gpsb/2cd39c97-97cd-4859-a7b4-1229dad5f53d\n# https://blog.csdn.net/yongping8204/article/details/7471627\nINVALID = '-1'\nMIN_PWD_LEN = 8\nMIN_PWD_HIS_SIZE = 5\n\n\nclass Config:\n    def __init__(self, path):\n        self.path = path\n        self.cf = configparser.ConfigParser()\n        self.cf.read_file(codecs.open(self.path, \"r\", \"utf_16\"))\n        s = self.cf.sections()\n\n    def get(self, field, key):\n        try:\n            result = str(self.cf.get(field, key))\n        except:\n            return INVALID\n        return result\n\n    def set(self, field, key, value):\n        self.cf.set(field, key, value)\n        self.cf.write(open(self.path, 'w'))\n        return True\n\n\ndef process(info):\n    output = os.system(\"secedit /export /cfg Password.ini\")\n\n    cf = Config(\"Password.ini\")\n\n    info[\"PWD MinimumPasswordAge\"] = cf.get(\"System Access\", \"MinimumPasswordAge\")\n    info[\"PWD MaximumPasswordAge\"] = cf.get(\"System Access\", \"MaximumPasswordAge\")\n    info[\"PWD MinimumPasswordLength\"] = cf.get(\"System Access\", \"MinimumPasswordLength\")\n    info[\"PWD PasswordComplexity\"] = cf.get(\"System Access\", \"PasswordComplexity\")\n    info[\"PWD PasswordHistorySize\"] = cf.get(\"System Access\", \"PasswordHistorySize\")\n\n    info[\"Account LockoutBadCount\"] = cf.get(\"System Access\", \"LockoutBadCount\")\n    info[\"Account LockoutDuration\"] = cf.get(\"System Access\", \"LockoutDuration\")\n    info[\"Account ResetLockoutCount\"] = cf.get(\"System Access\", \"ResetLockoutCount\")\n    info[\"Account NewAdministratorName\"] = cf.get(\"System Access\", \"NewAdministratorName\")\n    info[\"Account Guest Active\"] = cf.get(\"System Access\", \"EnableGuestAccount\")\n\n    info[\"Audit AuditLogonEvents\"] = cf.get(\"Event Audit\", \"AuditLogonEvents\")\n    info[\"Audit AuditSystemEvents\"] = cf.get(\"Event Audit\", \"AuditSystemEvents\")\n    info[\"Audit AuditObjectAccess\"] = cf.get(\"Event Audit\", \"AuditObjectAccess\")\n    info[\"Audit AuditPrivilegeUse\"] = cf.get(\"Event Audit\", \"AuditPrivilegeUse\")\n    info[\"Audit AuditPolicyChange\"] = cf.get(\"Event Audit\", \"AuditPolicyChange\")\n    info[\"Audit AuditAccountManage\"] = cf.get(\"Event Audit\", \"AuditAccountManage\")\n    info[\"Audit AuditProcessTracking\"] = cf.get(\"Event Audit\", \"AuditProcessTracking\")\n    info[\"Audit AuditDSAccess\"] = cf.get(\"Event Audit\", \"AuditDSAccess\")\n    info[\"Audit AuditAccountLogon\"] = cf.get(\"Event Audit\", \"AuditAccountLogon\")\n\n    info[\"Log AuditLogonEvents\"] = cf.get(\"Event Audit\", \"AuditLogonEvents\")\n\n    os.remove('Password.ini')\n\n\ndef analyze(result):\n    info = result['info']\n    result['risk_desc'] = ''\n    result['solution'] = ''\n\n    # 密码长度不能小于 MIN_PWD_LEN （8）\n    if SCRIPT_USAGE == 1:\n        if int(info[\"PWD MinimumPasswordLength\"]) < MIN_PWD_LEN:\n            result['risk_level'] = 3\n            result['risk_desc'] = '允许设置的密码长度太短'\n            result['solution'] = '设置密码长度最少为' + str(MIN_PWD_LEN) + '位。'\n        else:\n            result['risk_level'] = 0\n            result['risk_desc'] = '密码长度符合要求'\n            result['solution'] = '无'\n\n    # 密码复杂度（0 -- 65536）\n    if SCRIPT_USAGE == 2:\n        if int(info[\"PWD PasswordComplexity\"]) < 1:\n            result['risk_level'] = 3\n            result['risk_desc'] = '没有限制密码的复杂度'\n            result['solution'] = '密码不能含用户名，需包含大写字母、小写字母、数字及特殊字符。'\n        else:\n            result['risk_level'] = 0\n            result['risk_desc'] = '密码复杂度符合要求'\n            result['solution'] = '无'\n\n    # 强制密码历史：新密码设定时的历史唯一性检查，检查几个历史密码 （0 -- 65536）\n    if SCRIPT_USAGE == 3:\n        if int(info[\"PWD PasswordHistorySize\"]) < MIN_PWD_HIS_SIZE:\n            result['risk_level'] = 3\n            result['risk_desc'] = '强制密码历史不符合要求，当前系统设置为' + info[\"PWD PasswordHistorySize\"] + '个记住密码'\n            result['solution'] = '设置强制密码历史数最少为' + str(MIN_PWD_HIS_SIZE) + '个记住密码。'\n        else:\n            result['risk_level'] = 0\n            result['risk_desc'] = '强制密码历史符合要求'\n            result['solution'] = '无'\n\n    # 密码寿命：最小密码寿命设置为1天，最大密码寿命设置为30--90天\n    if SCRIPT_USAGE == 4:\n        if 30 <= int(info[\"PWD MaximumPasswordAge\"]) <= 90:\n            if int(info[\"PWD MinimumPasswordAge\"]) == 1:\n                result['risk_level'] = 0\n                result['risk_desc'] = '口令寿命符合要求'\n                result['solution'] = '无'\n            else:\n                result['risk_level'] = 1\n                result['risk_desc'] = '最小密码寿命设置不合理，当前设置为' + info[\"PWD MinimumPasswordAge\"] + '天'\n                result['solution'] = '设置最小密码寿命为1天。'\n        else:\n            result['risk_level'] = 2\n            result['risk_desc'] = '最大密码寿命不符合要求，当前设置为' + info[\"PWD MaximumPasswordAge\"] + '天'\n            result['solution'] = '设置最大密码寿命为30到90天。'\n\n    # 口令策略配置问题的解决方案增加系统策略设置路径\n    if result['risk_level'] != 0:\n        result['solution'] += '\\n策略设置路径为：Computer Configuration\\\\Windows Settings\\\\Security Settings\\\\Account ' \\\n                              'Policies\\\\Password Policy '\n\n\nif __name__ == '__main__':\n    info = {}\n    process(info)\n\n    result = {'info': info}\n    analyze(result)\n\n    print(result)\n",
											"description": "windows/pwd_policy.py, 设置SCRIPT_USAGE = 3",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "C.4.4 Win口令寿命",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Windows口令寿命",
											"type": "text"
										},
										{
											"key": "code",
											"value": "WindowsPwdAge",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "97309d94-0b9f-4d7e-8343-f14259c9b05c",
											"description": "分组：Windows口令配置",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "#!/usr/bin/python3.7\n# coding=utf-8\n\nimport configparser\nimport codecs\nimport os\n\n# 本脚本用于多条密码安全策略\n# SCRIPT_USAGE = 1    # 密码长度不能小于 MIN_PWD_LEN （8）\n# SCRIPT_USAGE = 2    # 密码复杂度（0 -- 65536）\n# SCRIPT_USAGE = 3    # 强制密码历史：新密码设定时的历史唯一性检查，检查几个历史密码 （0 -- 65536）\nSCRIPT_USAGE = 4  # 密码寿命：最小密码寿命设置为1天，最大密码寿命设置为30--90天\n\n# refer to the page:\n# https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-gpsb/2cd39c97-97cd-4859-a7b4-1229dad5f53d\n# https://blog.csdn.net/yongping8204/article/details/7471627\nINVALID = '-1'\nMIN_PWD_LEN = 8\nMIN_PWD_HIS_SIZE = 5\n\n\nclass Config:\n    def __init__(self, path):\n        self.path = path\n        self.cf = configparser.ConfigParser()\n        self.cf.read_file(codecs.open(self.path, \"r\", \"utf_16\"))\n        s = self.cf.sections()\n\n    def get(self, field, key):\n        try:\n            result = str(self.cf.get(field, key))\n        except:\n            return INVALID\n        return result\n\n    def set(self, field, key, value):\n        self.cf.set(field, key, value)\n        self.cf.write(open(self.path, 'w'))\n        return True\n\n\ndef process(info):\n    output = os.system(\"secedit /export /cfg Password.ini\")\n\n    cf = Config(\"Password.ini\")\n\n    info[\"PWD MinimumPasswordAge\"] = cf.get(\"System Access\", \"MinimumPasswordAge\")\n    info[\"PWD MaximumPasswordAge\"] = cf.get(\"System Access\", \"MaximumPasswordAge\")\n    info[\"PWD MinimumPasswordLength\"] = cf.get(\"System Access\", \"MinimumPasswordLength\")\n    info[\"PWD PasswordComplexity\"] = cf.get(\"System Access\", \"PasswordComplexity\")\n    info[\"PWD PasswordHistorySize\"] = cf.get(\"System Access\", \"PasswordHistorySize\")\n\n    info[\"Account LockoutBadCount\"] = cf.get(\"System Access\", \"LockoutBadCount\")\n    info[\"Account LockoutDuration\"] = cf.get(\"System Access\", \"LockoutDuration\")\n    info[\"Account ResetLockoutCount\"] = cf.get(\"System Access\", \"ResetLockoutCount\")\n    info[\"Account NewAdministratorName\"] = cf.get(\"System Access\", \"NewAdministratorName\")\n    info[\"Account Guest Active\"] = cf.get(\"System Access\", \"EnableGuestAccount\")\n\n    info[\"Audit AuditLogonEvents\"] = cf.get(\"Event Audit\", \"AuditLogonEvents\")\n    info[\"Audit AuditSystemEvents\"] = cf.get(\"Event Audit\", \"AuditSystemEvents\")\n    info[\"Audit AuditObjectAccess\"] = cf.get(\"Event Audit\", \"AuditObjectAccess\")\n    info[\"Audit AuditPrivilegeUse\"] = cf.get(\"Event Audit\", \"AuditPrivilegeUse\")\n    info[\"Audit AuditPolicyChange\"] = cf.get(\"Event Audit\", \"AuditPolicyChange\")\n    info[\"Audit AuditAccountManage\"] = cf.get(\"Event Audit\", \"AuditAccountManage\")\n    info[\"Audit AuditProcessTracking\"] = cf.get(\"Event Audit\", \"AuditProcessTracking\")\n    info[\"Audit AuditDSAccess\"] = cf.get(\"Event Audit\", \"AuditDSAccess\")\n    info[\"Audit AuditAccountLogon\"] = cf.get(\"Event Audit\", \"AuditAccountLogon\")\n\n    info[\"Log AuditLogonEvents\"] = cf.get(\"Event Audit\", \"AuditLogonEvents\")\n\n    os.remove('Password.ini')\n\n\ndef analyze(result):\n    info = result['info']\n    result['risk_desc'] = ''\n    result['solution'] = ''\n\n    # 密码长度不能小于 MIN_PWD_LEN （8）\n    if SCRIPT_USAGE == 1:\n        if int(info[\"PWD MinimumPasswordLength\"]) < MIN_PWD_LEN:\n            result['risk_level'] = 3\n            result['risk_desc'] = '允许设置的密码长度太短'\n            result['solution'] = '设置密码长度最少为' + str(MIN_PWD_LEN) + '位。'\n        else:\n            result['risk_level'] = 0\n            result['risk_desc'] = '密码长度符合要求'\n            result['solution'] = '无'\n\n    # 密码复杂度（0 -- 65536）\n    if SCRIPT_USAGE == 2:\n        if int(info[\"PWD PasswordComplexity\"]) < 1:\n            result['risk_level'] = 3\n            result['risk_desc'] = '没有限制密码的复杂度'\n            result['solution'] = '密码不能含用户名，需包含大写字母、小写字母、数字及特殊字符。'\n        else:\n            result['risk_level'] = 0\n            result['risk_desc'] = '密码复杂度符合要求'\n            result['solution'] = '无'\n\n    # 强制密码历史：新密码设定时的历史唯一性检查，检查几个历史密码 （0 -- 65536）\n    if SCRIPT_USAGE == 3:\n        if int(info[\"PWD PasswordHistorySize\"]) < MIN_PWD_HIS_SIZE:\n            result['risk_level'] = 3\n            result['risk_desc'] = '强制密码历史不符合要求，当前系统设置为' + info[\"PWD PasswordHistorySize\"] + '个记住密码'\n            result['solution'] = '设置强制密码历史数最少为' + str(MIN_PWD_HIS_SIZE) + '个记住密码。'\n        else:\n            result['risk_level'] = 0\n            result['risk_desc'] = '强制密码历史符合要求'\n            result['solution'] = '无'\n\n    # 密码寿命：最小密码寿命设置为1天，最大密码寿命设置为30--90天\n    if SCRIPT_USAGE == 4:\n        if 30 <= int(info[\"PWD MaximumPasswordAge\"]) <= 90:\n            if int(info[\"PWD MinimumPasswordAge\"]) == 1:\n                result['risk_level'] = 0\n                result['risk_desc'] = '口令寿命符合要求'\n                result['solution'] = '无'\n            else:\n                result['risk_level'] = 1\n                result['risk_desc'] = '最小密码寿命设置不合理，当前设置为' + info[\"PWD MinimumPasswordAge\"] + '天'\n                result['solution'] = '设置最小密码寿命为1天。'\n        else:\n            result['risk_level'] = 2\n            result['risk_desc'] = '最大密码寿命不符合要求，当前设置为' + info[\"PWD MaximumPasswordAge\"] + '天'\n            result['solution'] = '设置最大密码寿命为30到90天。'\n\n    # 口令策略配置问题的解决方案增加系统策略设置路径\n    if result['risk_level'] != 0:\n        result['solution'] += '\\n策略设置路径为：Computer Configuration\\\\Windows Settings\\\\Security Settings\\\\Account ' \\\n                              'Policies\\\\Password Policy '\n\n\nif __name__ == '__main__':\n    info = {}\n    process(info)\n\n    result = {'info': info}\n    analyze(result)\n\n    print(result)\n",
											"description": "windows/pwd_policy.py, 设置SCRIPT_USAGE = 4",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "C.5 Win账号配置",
					"item": [
						{
							"name": "C.5.1 Win账户锁定阈值",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Windows账户锁定阈值",
											"type": "text"
										},
										{
											"key": "code",
											"value": "WindowsAccLockBadCount",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "5aa4e0dc-2019-49c1-885b-925bac3238d0",
											"description": "分组：Windows用户账号配置",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "#!/usr/bin/python3.7\n# coding=utf-8\n\nimport configparser\nimport codecs\nimport os\n\n# 本脚本用于多条密码安全策略\nSCRIPT_USAGE = 1  # 账户锁定阈值（0 -- 65536），建议10次口令失败\n# SCRIPT_USAGE = 2    # 账户锁定时间（0 -- 99,999分钟），建议锁定15分钟\n# SCRIPT_USAGE = 3    # 强制过期时间（0 -- 99,999小时），建议24小时\n\n# refer to the page:\n# https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-gpsb/2cd39c97-97cd-4859-a7b4-1229dad5f53d\n# https://blog.csdn.net/yongping8204/article/details/7471627\nINVALID = '-1'\nMAX_LOCKOUT_THRESHOLD = 10\nMIN_LOCKOUT_DURATION = 15\n\n\nclass Config:\n    def __init__(self, path):\n        self.path = path\n        self.cf = configparser.ConfigParser()\n        self.cf.read_file(codecs.open(self.path, \"r\", \"utf_16\"))\n        s = self.cf.sections()\n\n    def get(self, field, key):\n        try:\n            result = str(self.cf.get(field, key))\n        except:\n            return INVALID\n        return result\n\n    def set(self, field, key, value):\n        self.cf.set(field, key, value)\n        self.cf.write(open(self.path, 'w'))\n        return True\n\n\ndef process(info):\n    output = os.system(\"secedit /export /cfg Password.ini\")\n\n    cf = Config(\"Password.ini\")\n\n    info[\"Account LockoutBadCount\"] = cf.get(\"System Access\", \"LockoutBadCount\")\n    info[\"Account LockoutDuration\"] = cf.get(\"System Access\", \"LockoutDuration\")\n    info[\"Account ResetLockoutCount\"] = cf.get(\"System Access\", \"ResetLockoutCount\")\n    info[\"Account ForceLogoffWhenHourExpire\"] = cf.get(\"System Access\", \"ForceLogoffWhenHourExpire\")\n    info[\"Account NewAdministratorName\"] = cf.get(\"System Access\", \"NewAdministratorName\")\n    info[\"Account Guest Active\"] = cf.get(\"System Access\", \"EnableGuestAccount\")\n\n    os.remove('Password.ini')\n\n\ndef analyze(result):\n    info = result['info']\n    result['risk_desc'] = ''\n    result['solution'] = ''\n\n    # 账户锁定阈值（0 -- 65536），建议10次口令失败\n    if SCRIPT_USAGE == 1:\n        if int(info[\"Account LockoutBadCount\"]) > MAX_LOCKOUT_THRESHOLD:\n            result['risk_level'] = 2\n            result['risk_desc'] = '账户锁定阈值太大，当前设置是' + info[\"Account LockoutBadCount\"]\n            result['solution'] = '设置账户锁定阈值为3到10之间。'\n        elif int(info[\"Account LockoutBadCount\"]) <= 0:\n            result['risk_level'] = 3\n            result['risk_desc'] = '未设定账户锁定阈值，大大提高了账户被破解的风险'\n            result['solution'] = '设置账户锁定阈值为3到10之间。'\n        else:\n            result['risk_level'] = 0\n            result['risk_desc'] = '当前账户锁定阈值是' + info[\"Account LockoutBadCount\"] + '，符合账户安全要求'\n            result['solution'] = '无'\n\n    # 账户锁定时间（0 -- 99,999分钟），建议锁定15分钟\n    if SCRIPT_USAGE == 2:\n        if int(info[\"Account LockoutDuration\"]) <= 0:\n            result['risk_level'] = 3\n            result['risk_desc'] = '未设置口令试错的账户锁定时间'\n            result['solution'] = '设置账户锁定时间为' + str(MIN_LOCKOUT_DURATION) + '分钟以上。'\n        elif int(info[\"Account LockoutDuration\"]) < MIN_LOCKOUT_DURATION:\n            result['risk_level'] = 1\n            result['risk_desc'] = '账户锁定时间过短，当前设置是' + info[\"Account LockoutDuration\"] + '分钟。'\n            result['solution'] = '设置账户锁定时间为' + str(MIN_LOCKOUT_DURATION) + '分钟以上。'\n        else:\n            result['risk_level'] = 0\n            result['risk_desc'] = '当前账户锁定时间是' + info[\"Account LockoutDuration\"] + '分钟，符合账户安全要求'\n            result['solution'] = '无'\n\n    # 强制过期时间（0 -- 99,999小时），建议24小时\n    if SCRIPT_USAGE == 3:\n        if int(info[\"Account ForceLogoffWhenHourExpire\"]) == 0:\n            result['risk_level'] = 2\n            result['risk_desc'] = '未设置账户的强制过期时间'\n            result['solution'] = '设置账户的强制过期时间为24小时。'\n        else:\n            result['risk_level'] = 0\n            result['risk_desc'] = '当前账户的强制过期时间是' + info[\"Account ForceLogoffWhenHourExpire\"] + '小时，符合账户安全要求'\n            result['solution'] = '无'\n\n    # 口令策略配置问题的解决方案增加系统策略设置路径\n    if result['risk_level'] != 0:\n        result['solution'] += '\\n策略设置路径为：Computer Configuration\\\\Windows Settings\\\\Security Settings\\\\Account ' \\\n                              'Policies\\\\Password Policy '\n\n\nif __name__ == '__main__':\n    info = {}\n    process(info)\n\n    result = {'info': info}\n    analyze(result)\n\n    print(result)\n",
											"description": "windows/account_policy.py, 设置SCRIPT_USAGE = 1",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "C.5.2 Win账户锁定时间",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Windows账户锁定时间",
											"type": "text"
										},
										{
											"key": "code",
											"value": "WindowsAccLockDuration",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "5aa4e0dc-2019-49c1-885b-925bac3238d0",
											"description": "分组：Windows用户账号配置",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "#!/usr/bin/python3.7\n# coding=utf-8\n\nimport configparser\nimport codecs\nimport os\n\n# 本脚本用于多条密码安全策略\n# SCRIPT_USAGE = 1  # 账户锁定阈值（0 -- 65536），建议10次口令失败\nSCRIPT_USAGE = 2    # 账户锁定时间（0 -- 99,999分钟），建议锁定15分钟\n# SCRIPT_USAGE = 3    # 强制过期时间（0 -- 99,999小时），建议24小时\n\n# refer to the page:\n# https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-gpsb/2cd39c97-97cd-4859-a7b4-1229dad5f53d\n# https://blog.csdn.net/yongping8204/article/details/7471627\nINVALID = '-1'\nMAX_LOCKOUT_THRESHOLD = 10\nMIN_LOCKOUT_DURATION = 15\n\n\nclass Config:\n    def __init__(self, path):\n        self.path = path\n        self.cf = configparser.ConfigParser()\n        self.cf.read_file(codecs.open(self.path, \"r\", \"utf_16\"))\n        s = self.cf.sections()\n\n    def get(self, field, key):\n        try:\n            result = str(self.cf.get(field, key))\n        except:\n            return INVALID\n        return result\n\n    def set(self, field, key, value):\n        self.cf.set(field, key, value)\n        self.cf.write(open(self.path, 'w'))\n        return True\n\n\ndef process(info):\n    output = os.system(\"secedit /export /cfg Password.ini\")\n\n    cf = Config(\"Password.ini\")\n\n    info[\"Account LockoutBadCount\"] = cf.get(\"System Access\", \"LockoutBadCount\")\n    info[\"Account LockoutDuration\"] = cf.get(\"System Access\", \"LockoutDuration\")\n    info[\"Account ResetLockoutCount\"] = cf.get(\"System Access\", \"ResetLockoutCount\")\n    info[\"Account ForceLogoffWhenHourExpire\"] = cf.get(\"System Access\", \"ForceLogoffWhenHourExpire\")\n    info[\"Account NewAdministratorName\"] = cf.get(\"System Access\", \"NewAdministratorName\")\n    info[\"Account Guest Active\"] = cf.get(\"System Access\", \"EnableGuestAccount\")\n\n    os.remove('Password.ini')\n\n\ndef analyze(result):\n    info = result['info']\n    result['risk_desc'] = ''\n    result['solution'] = ''\n\n    # 账户锁定阈值（0 -- 65536），建议10次口令失败\n    if SCRIPT_USAGE == 1:\n        if int(info[\"Account LockoutBadCount\"]) > MAX_LOCKOUT_THRESHOLD:\n            result['risk_level'] = 2\n            result['risk_desc'] = '账户锁定阈值太大，当前设置是' + info[\"Account LockoutBadCount\"]\n            result['solution'] = '设置账户锁定阈值为3到10之间。'\n        elif int(info[\"Account LockoutBadCount\"]) <= 0:\n            result['risk_level'] = 3\n            result['risk_desc'] = '未设定账户锁定阈值，大大提高了账户被破解的风险'\n            result['solution'] = '设置账户锁定阈值为3到10之间。'\n        else:\n            result['risk_level'] = 0\n            result['risk_desc'] = '当前账户锁定阈值是' + info[\"Account LockoutBadCount\"] + '，符合账户安全要求'\n            result['solution'] = '无'\n\n    # 账户锁定时间（0 -- 99,999分钟），建议锁定15分钟\n    if SCRIPT_USAGE == 2:\n        if int(info[\"Account LockoutDuration\"]) <= 0:\n            result['risk_level'] = 3\n            result['risk_desc'] = '未设置口令试错的账户锁定时间'\n            result['solution'] = '设置账户锁定时间为' + str(MIN_LOCKOUT_DURATION) + '分钟以上。'\n        elif int(info[\"Account LockoutDuration\"]) < MIN_LOCKOUT_DURATION:\n            result['risk_level'] = 1\n            result['risk_desc'] = '账户锁定时间过短，当前设置是' + info[\"Account LockoutDuration\"] + '分钟。'\n            result['solution'] = '设置账户锁定时间为' + str(MIN_LOCKOUT_DURATION) + '分钟以上。'\n        else:\n            result['risk_level'] = 0\n            result['risk_desc'] = '当前账户锁定时间是' + info[\"Account LockoutDuration\"] + '分钟，符合账户安全要求'\n            result['solution'] = '无'\n\n    # 强制过期时间（0 -- 99,999小时），建议24小时\n    if SCRIPT_USAGE == 3:\n        if int(info[\"Account ForceLogoffWhenHourExpire\"]) == 0:\n            result['risk_level'] = 2\n            result['risk_desc'] = '未设置账户的强制过期时间'\n            result['solution'] = '设置账户的强制过期时间为24小时。'\n        else:\n            result['risk_level'] = 0\n            result['risk_desc'] = '当前账户的强制过期时间是' + info[\"Account ForceLogoffWhenHourExpire\"] + '小时，符合账户安全要求'\n            result['solution'] = '无'\n\n    # 口令策略配置问题的解决方案增加系统策略设置路径\n    if result['risk_level'] != 0:\n        result['solution'] += '\\n策略设置路径为：Computer Configuration\\\\Windows Settings\\\\Security Settings\\\\Account ' \\\n                              'Policies\\\\Password Policy '\n\n\nif __name__ == '__main__':\n    info = {}\n    process(info)\n\n    result = {'info': info}\n    analyze(result)\n\n    print(result)\n",
											"description": "windows/account_policy.py, 设置SCRIPT_USAGE = 2",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "C.5.3 Win账户强制过期时间",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Windows账户锁定时间",
											"type": "text"
										},
										{
											"key": "code",
											"value": "WindowsAccLockDuration",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "5aa4e0dc-2019-49c1-885b-925bac3238d0",
											"description": "分组：Windows用户账号配置",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "#!/usr/bin/python3.7\n# coding=utf-8\n\nimport configparser\nimport codecs\nimport os\n\n# 本脚本用于多条密码安全策略\n# SCRIPT_USAGE = 1  # 账户锁定阈值（0 -- 65536），建议10次口令失败\n# SCRIPT_USAGE = 2    # 账户锁定时间（0 -- 99,999分钟），建议锁定15分钟\nSCRIPT_USAGE = 3    # 强制过期时间（0 -- 99,999小时），建议24小时\n\n# refer to the page:\n# https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-gpsb/2cd39c97-97cd-4859-a7b4-1229dad5f53d\n# https://blog.csdn.net/yongping8204/article/details/7471627\nINVALID = '-1'\nMAX_LOCKOUT_THRESHOLD = 10\nMIN_LOCKOUT_DURATION = 15\n\n\nclass Config:\n    def __init__(self, path):\n        self.path = path\n        self.cf = configparser.ConfigParser()\n        self.cf.read_file(codecs.open(self.path, \"r\", \"utf_16\"))\n        s = self.cf.sections()\n\n    def get(self, field, key):\n        try:\n            result = str(self.cf.get(field, key))\n        except:\n            return INVALID\n        return result\n\n    def set(self, field, key, value):\n        self.cf.set(field, key, value)\n        self.cf.write(open(self.path, 'w'))\n        return True\n\n\ndef process(info):\n    output = os.system(\"secedit /export /cfg Password.ini\")\n\n    cf = Config(\"Password.ini\")\n\n    info[\"Account LockoutBadCount\"] = cf.get(\"System Access\", \"LockoutBadCount\")\n    info[\"Account LockoutDuration\"] = cf.get(\"System Access\", \"LockoutDuration\")\n    info[\"Account ResetLockoutCount\"] = cf.get(\"System Access\", \"ResetLockoutCount\")\n    info[\"Account ForceLogoffWhenHourExpire\"] = cf.get(\"System Access\", \"ForceLogoffWhenHourExpire\")\n    info[\"Account NewAdministratorName\"] = cf.get(\"System Access\", \"NewAdministratorName\")\n    info[\"Account Guest Active\"] = cf.get(\"System Access\", \"EnableGuestAccount\")\n\n    os.remove('Password.ini')\n\n\ndef analyze(result):\n    info = result['info']\n    result['risk_desc'] = ''\n    result['solution'] = ''\n\n    # 账户锁定阈值（0 -- 65536），建议10次口令失败\n    if SCRIPT_USAGE == 1:\n        if int(info[\"Account LockoutBadCount\"]) > MAX_LOCKOUT_THRESHOLD:\n            result['risk_level'] = 2\n            result['risk_desc'] = '账户锁定阈值太大，当前设置是' + info[\"Account LockoutBadCount\"]\n            result['solution'] = '设置账户锁定阈值为3到10之间。'\n        elif int(info[\"Account LockoutBadCount\"]) <= 0:\n            result['risk_level'] = 3\n            result['risk_desc'] = '未设定账户锁定阈值，大大提高了账户被破解的风险'\n            result['solution'] = '设置账户锁定阈值为3到10之间。'\n        else:\n            result['risk_level'] = 0\n            result['risk_desc'] = '当前账户锁定阈值是' + info[\"Account LockoutBadCount\"] + '，符合账户安全要求'\n            result['solution'] = '无'\n\n    # 账户锁定时间（0 -- 99,999分钟），建议锁定15分钟\n    if SCRIPT_USAGE == 2:\n        if int(info[\"Account LockoutDuration\"]) <= 0:\n            result['risk_level'] = 3\n            result['risk_desc'] = '未设置口令试错的账户锁定时间'\n            result['solution'] = '设置账户锁定时间为' + str(MIN_LOCKOUT_DURATION) + '分钟以上。'\n        elif int(info[\"Account LockoutDuration\"]) < MIN_LOCKOUT_DURATION:\n            result['risk_level'] = 1\n            result['risk_desc'] = '账户锁定时间过短，当前设置是' + info[\"Account LockoutDuration\"] + '分钟。'\n            result['solution'] = '设置账户锁定时间为' + str(MIN_LOCKOUT_DURATION) + '分钟以上。'\n        else:\n            result['risk_level'] = 0\n            result['risk_desc'] = '当前账户锁定时间是' + info[\"Account LockoutDuration\"] + '分钟，符合账户安全要求'\n            result['solution'] = '无'\n\n    # 强制过期时间（0 -- 99,999小时），建议24小时\n    if SCRIPT_USAGE == 3:\n        if int(info[\"Account ForceLogoffWhenHourExpire\"]) == 0:\n            result['risk_level'] = 2\n            result['risk_desc'] = '未设置账户的强制过期时间'\n            result['solution'] = '设置账户的强制过期时间为24小时。'\n        else:\n            result['risk_level'] = 0\n            result['risk_desc'] = '当前账户的强制过期时间是' + info[\"Account ForceLogoffWhenHourExpire\"] + '小时，符合账户安全要求'\n            result['solution'] = '无'\n\n    # 口令策略配置问题的解决方案增加系统策略设置路径\n    if result['risk_level'] != 0:\n        result['solution'] += '\\n策略设置路径为：Computer Configuration\\\\Windows Settings\\\\Security Settings\\\\Account ' \\\n                              'Policies\\\\Password Policy '\n\n\nif __name__ == '__main__':\n    info = {}\n    process(info)\n\n    result = {'info': info}\n    analyze(result)\n\n    print(result)\n",
											"description": "windows/account_policy.py, 设置SCRIPT_USAGE = 3",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "C.5.4 Win账户激活状态",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Windows账户激活状态",
											"type": "text"
										},
										{
											"key": "code",
											"value": "WindowsAccActive",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "5aa4e0dc-2019-49c1-885b-925bac3238d0",
											"description": "分组：Windows用户账号配置",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "#!/usr/bin/python3.7\n# coding=utf-8\n\nimport configparser\nimport codecs\nimport os\n\n# 本脚本用于多条密码安全策略\n# SCRIPT_USAGE = 1  # 账户锁定阈值（0 -- 65536），建议10次口令失败\n# SCRIPT_USAGE = 2    # 账户锁定时间（0 -- 99,999分钟），建议锁定15分钟\nSCRIPT_USAGE = 3    # 强制过期时间（0 -- 99,999小时），建议24小时\n\n# refer to the page:\n# https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-gpsb/2cd39c97-97cd-4859-a7b4-1229dad5f53d\n# https://blog.csdn.net/yongping8204/article/details/7471627\nINVALID = '-1'\nMAX_LOCKOUT_THRESHOLD = 10\nMIN_LOCKOUT_DURATION = 15\n\n\nclass Config:\n    def __init__(self, path):\n        self.path = path\n        self.cf = configparser.ConfigParser()\n        self.cf.read_file(codecs.open(self.path, \"r\", \"utf_16\"))\n        s = self.cf.sections()\n\n    def get(self, field, key):\n        try:\n            result = str(self.cf.get(field, key))\n        except:\n            return INVALID\n        return result\n\n    def set(self, field, key, value):\n        self.cf.set(field, key, value)\n        self.cf.write(open(self.path, 'w'))\n        return True\n\n\ndef process(info):\n    output = os.system(\"secedit /export /cfg Password.ini\")\n\n    cf = Config(\"Password.ini\")\n\n    info[\"Account LockoutBadCount\"] = cf.get(\"System Access\", \"LockoutBadCount\")\n    info[\"Account LockoutDuration\"] = cf.get(\"System Access\", \"LockoutDuration\")\n    info[\"Account ResetLockoutCount\"] = cf.get(\"System Access\", \"ResetLockoutCount\")\n    info[\"Account ForceLogoffWhenHourExpire\"] = cf.get(\"System Access\", \"ForceLogoffWhenHourExpire\")\n    info[\"Account NewAdministratorName\"] = cf.get(\"System Access\", \"NewAdministratorName\")\n    info[\"Account Guest Active\"] = cf.get(\"System Access\", \"EnableGuestAccount\")\n\n    os.remove('Password.ini')\n\n    return\n\n\ndef analyze(result):\n    info = result['info']\n    result['risk_desc'] = ''\n    result['solution'] = ''\n\n    # 账户锁定阈值（0 -- 65536），建议10次口令失败\n    if SCRIPT_USAGE == 1:\n        if int(info[\"Account LockoutBadCount\"]) > MAX_LOCKOUT_THRESHOLD:\n            result['risk_level'] = 2\n            result['risk_desc'] = '账户锁定阈值太大，当前设置是' + info[\"Account LockoutBadCount\"]\n            result['solution'] = '设置账户锁定阈值为3到10之间。'\n        elif int(info[\"Account LockoutBadCount\"]) <= 0:\n            result['risk_level'] = 3\n            result['risk_desc'] = '未设定账户锁定阈值，大大提高了账户被破解的风险'\n            result['solution'] = '设置账户锁定阈值为3到10之间。'\n        else:\n            result['risk_level'] = 0\n            result['risk_desc'] = '当前账户锁定阈值是' + info[\"Account LockoutBadCount\"] + '，符合账户安全要求'\n            result['solution'] = '无'\n\n    # 账户锁定时间（0 -- 99,999分钟），建议锁定15分钟\n    if SCRIPT_USAGE == 2:\n        if int(info[\"Account LockoutDuration\"]) <= 0:\n            result['risk_level'] = 3\n            result['risk_desc'] = '未设置口令试错的账户锁定时间'\n            result['solution'] = '设置账户锁定时间为' + str(MIN_LOCKOUT_DURATION) + '分钟以上。'\n        elif int(info[\"Account LockoutDuration\"]) < MIN_LOCKOUT_DURATION:\n            result['risk_level'] = 1\n            result['risk_desc'] = '账户锁定时间过短，当前设置是' + info[\"Account LockoutDuration\"] + '分钟。'\n            result['solution'] = '设置账户锁定时间为' + str(MIN_LOCKOUT_DURATION) + '分钟以上。'\n        else:\n            result['risk_level'] = 0\n            result['risk_desc'] = '当前账户锁定时间是' + info[\"Account LockoutDuration\"] + '分钟，符合账户安全要求'\n            result['solution'] = '无'\n\n    # 强制过期时间（0 -- 99,999小时），建议24小时\n    if SCRIPT_USAGE == 3:\n        if int(info[\"Account ForceLogoffWhenHourExpire\"]) == 0:\n            result['risk_level'] = 2\n            result['risk_desc'] = '未设置账户的强制过期时间'\n            result['solution'] = '设置账户的强制过期时间为24小时。'\n        else:\n            result['risk_level'] = 0\n            result['risk_desc'] = '当前账户的强制过期时间是' + info[\"Account ForceLogoffWhenHourExpire\"] + '小时，符合账户安全要求'\n            result['solution'] = '无'\n\n    # 口令策略配置问题的解决方案增加系统策略设置路径\n    if result['risk_level'] != 0:\n        result['solution'] += '\\n策略设置路径为：Computer Configuration\\\\Windows Settings\\\\Security Settings\\\\Account ' \\\n                              'Policies\\\\Password Policy '\n\n    return\n\n\nif __name__ == '__main__':\n    info = {}\n    process(info)\n\n    result = {'info': info}\n    analyze(result)\n\n    print(result)\n",
											"description": "windows/account_security.py",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "2000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "C.6 Win网络配置",
					"item": [
						{
							"name": "C.6.1 Win抵御ICMP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Windows抵御ICMP攻击",
											"type": "text"
										},
										{
											"key": "code",
											"value": "WindowsICMPProtect",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "38bf2c29-8bd3-4e40-855d-d80687a7040c",
											"description": "分组：Windows网络通信配置",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "#!/usr/bin/python3.7\n# coding=utf-8\nimport os\nimport winreg\n\nSCRIPT_USAGE = 1  # 抵御 ICMP 攻击\n# SCRIPT_USAGE = 2  # 抵御 SYN 攻击\n# SCRIPT_USAGE = 3  # 抵御 SNMP 攻击\n# SCRIPT_USAGE = 4  # 其它网络保护\n\n\ndef getRegValue(key, value_name):\n    try:\n        value, type = winreg.QueryValueEx(key, value_name)\n    except WindowsError:\n        value = -1\n\n    return value\n\n\ndef process_and_anylyze(result):\n    info = {}\n    result['info'] = info\n    result['risk_level'] = 0\n    result['risk_desc'] = '未发现网络配置缺陷。'\n    result['solution'] = '无'\n\n    if SCRIPT_USAGE == 1:\n        # ===================================================================\n        # 打开注册表 HKLM\\System\\CurrentControlSet\\Services\\AFD\\Parameters\n        key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r'System\\CurrentControlSet\\Services\\AFD\\Parameters')\n\n        # EnableICMPRedirect：ICMP 重定向数据包的处理\n        # 有效值：0（禁用），1（启用）。建议值：0\n        value = getRegValue(key, 'EnableICMPRedirect')\n        info['EnableICMPRedirect'] = value\n        if value != 0:\n            result['risk_level'] = 1\n            result['risk_desc'] = '没有禁用 ICMP 重定向数据包，易受到ICMP攻击。'\n            result[\n                'solution'] = '设置注册表项 HKLM\\System\\CurrentControlSet\\Services\\AFD\\Parameters下的键值：EnableICMPRedirect = 0。'\n        return\n\n    # ===================================================================\n    # 打开注册表 HKLM\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters\n    key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r'System\\CurrentControlSet\\Services\\Tcpip\\Parameters')\n\n    if SCRIPT_USAGE == 2:\n        # SynAttackProtect 机制是通过关闭某些socket选项，增加额外的连接指示和减少超时时间，使系统能处理更多的SYN连接，以达到防范SYN攻击的目的\n        # 缺省没有这个键值，系统不受 SynAttackProtect 保护。建议值：2\n        # 有效值：0，系统不受 SynAttackProtect 保护\n        # 有效值：1，系统通过减少重传次数和延迟未连接时路由缓冲项（route cache entry）防范SYN攻击\n        # 有效值：2，系统不仅使用backlog队列，还使用附加的半连接指示，以此来处理更多的SYN连接，使用此键值时，tcp/ip的TCPInitialRTT、window size和可滑动窗囗将被禁止\n        value = getRegValue(key, 'SynAttackProtect')\n        info['SynAttackProtect'] = value\n        if value == 1:\n            result['risk_level'] = 1\n            result['risk_desc'] = '系统通过减少重传次数和延迟未连接时路由缓冲项（route cache entry）防范SYN攻击，为进一步降低SYN攻击风险，可以禁止TCP/IP滑动窗口。'\n            result['solution'] = '设置注册表项 HKLM\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters下的键值：SynAttackProtect ' \\\n                                 '= 2，系统不仅使用backlog队列，还使用附加的半连接指示，以此来处理更多的SYN连接，使用此键值时，tcp/ip的TCPInitialRTT、window ' \\\n                                 'size和可滑动窗囗将被禁止 '\n        elif value <= 0:\n            result['risk_level'] = 2\n            result['risk_desc'] = '系统不受 SynAttackProtect 保护，无法有效防范SYN攻击。'\n            result['solution'] = '设置注册表项 HKLM\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters下的键值：SynAttackProtect ' \\\n                                 '= 2，系统不仅使用backlog队列，还使用附加的半连接指示，以此来处理更多的SYN连接，使用此键值时，tcp/ip的TCPInitialRTT、window ' \\\n                                 'size和可滑动窗囗将被禁止 '\n        return\n\n    if SCRIPT_USAGE == 3:\n        # EnableDeadGWDetect 禁止攻击者强制切换到备用网关\n        # 有效值：0（禁用），1（启用）\n        # 建议的数值数据： 0\n        value = getRegValue(key, 'EnableDeadGWDetect')\n        info['EnableDeadGWDetect'] = value\n        if value != 0:\n            result['risk_level'] = 2\n            result['risk_desc'] = '系统没有禁止攻击者强制切换到备用网关，无法有效抵御 SNMP 攻击。'\n            result['solution'] = '设置注册表项 HKLM\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters' \\\n                                 '下的键值：EnableDeadGWDetect = 0，系统不仅使用backlog队列，还使用附加的半连接指示，以此来处理更多的SYN连接，使用此键值时，tcp/ip' \\\n                                 '的TCPInitialRTT、window size和可滑动窗囗将被禁止 '\n        return\n\n    if SCRIPT_USAGE == 4:\n        # DisableIPSourceRouting\n        # 禁用 IP 源路由，后者允许发送者确认数据报在网络中应采用的路由。\n        # 有效值：0（转发所有数据包），1（不转发源路由数据包），2（丢弃所有传入的源路由数据包）。\n        # 建议的数值数据： 1\n        value = getRegValue(key, 'DisableIPSourceRouting')\n        info['DisableIPSourceRouting'] = value\n        if value >= 2:\n            result['risk_level'] = 1\n            result['risk_desc'] = '系统丢弃所有传入的源路由数据包。'\n            result['solution'] = '设置注册表项 HKLM\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters' \\\n                                 '下的键值：DisableIPSourceRouting = 1，禁用 IP 源路由，不允许发送者确认数据报在网络中应采用的路由。 '\n        elif value <= 0:\n            result['risk_level'] = 2\n            result['risk_desc'] = '系统转发所有数据包，攻击者可能规避 NAT 屏蔽，以便使用 IP 源路由来确定网络拓扑。'\n            result['solution'] = '设置注册表项 HKLM\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters' \\\n                                 '下的键值：DisableIPSourceRouting = 1，禁用 IP 源路由，不允许发送者确认数据报在网络中应采用的路由。 '\n\n    return\n\n\nif __name__ == '__main__':\n    _result = {}\n    process_and_anylyze(_result)\n\n    print(_result)\n",
											"description": "windows/tcpip_service.py，SCRIPT_USAGE = 1",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "C.6.2 Win抵御SYN",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Windows抵御SYN攻击",
											"type": "text"
										},
										{
											"key": "code",
											"value": "WindowsSYNProtect",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "38bf2c29-8bd3-4e40-855d-d80687a7040c",
											"description": "分组：Windows网络通信配置",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "#!/usr/bin/python3.7\n# coding=utf-8\nimport os\nimport winreg\n\n# SCRIPT_USAGE = 1  # 抵御 ICMP 攻击\nSCRIPT_USAGE = 2  # 抵御 SYN 攻击\n# SCRIPT_USAGE = 3  # 抵御 SNMP 攻击\n# SCRIPT_USAGE = 4  # 其它网络保护\n\n\ndef getRegValue(key, value_name):\n    try:\n        value, type = winreg.QueryValueEx(key, value_name)\n    except WindowsError:\n        value = -1\n\n    return value\n\n\ndef process_and_anylyze(result):\n    info = {}\n    result['info'] = info\n    result['risk_level'] = 0\n    result['risk_desc'] = '未发现网络配置缺陷。'\n    result['solution'] = '无'\n\n    if SCRIPT_USAGE == 1:\n        # ===================================================================\n        # 打开注册表 HKLM\\System\\CurrentControlSet\\Services\\AFD\\Parameters\n        key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r'System\\CurrentControlSet\\Services\\AFD\\Parameters')\n\n        # EnableICMPRedirect：ICMP 重定向数据包的处理\n        # 有效值：0（禁用），1（启用）。建议值：0\n        value = getRegValue(key, 'EnableICMPRedirect')\n        info['EnableICMPRedirect'] = value\n        if value != 0:\n            result['risk_level'] = 1\n            result['risk_desc'] = '没有禁用 ICMP 重定向数据包，易受到ICMP攻击。'\n            result[\n                'solution'] = '设置注册表项 HKLM\\System\\CurrentControlSet\\Services\\AFD\\Parameters下的键值：EnableICMPRedirect = 0。'\n        return\n\n    # ===================================================================\n    # 打开注册表 HKLM\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters\n    key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r'System\\CurrentControlSet\\Services\\Tcpip\\Parameters')\n\n    if SCRIPT_USAGE == 2:\n        # SynAttackProtect 机制是通过关闭某些socket选项，增加额外的连接指示和减少超时时间，使系统能处理更多的SYN连接，以达到防范SYN攻击的目的\n        # 缺省没有这个键值，系统不受 SynAttackProtect 保护。建议值：2\n        # 有效值：0，系统不受 SynAttackProtect 保护\n        # 有效值：1，系统通过减少重传次数和延迟未连接时路由缓冲项（route cache entry）防范SYN攻击\n        # 有效值：2，系统不仅使用backlog队列，还使用附加的半连接指示，以此来处理更多的SYN连接，使用此键值时，tcp/ip的TCPInitialRTT、window size和可滑动窗囗将被禁止\n        value = getRegValue(key, 'SynAttackProtect')\n        info['SynAttackProtect'] = value\n        if value == 1:\n            result['risk_level'] = 1\n            result['risk_desc'] = '系统通过减少重传次数和延迟未连接时路由缓冲项（route cache entry）防范SYN攻击，为进一步降低SYN攻击风险，可以禁止TCP/IP滑动窗口。'\n            result['solution'] = '设置注册表项 HKLM\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters下的键值：SynAttackProtect ' \\\n                                 '= 2，系统不仅使用backlog队列，还使用附加的半连接指示，以此来处理更多的SYN连接，使用此键值时，tcp/ip的TCPInitialRTT、window ' \\\n                                 'size和可滑动窗囗将被禁止 '\n        elif value <= 0:\n            result['risk_level'] = 2\n            result['risk_desc'] = '系统不受 SynAttackProtect 保护，无法有效防范SYN攻击。'\n            result['solution'] = '设置注册表项 HKLM\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters下的键值：SynAttackProtect ' \\\n                                 '= 2，系统不仅使用backlog队列，还使用附加的半连接指示，以此来处理更多的SYN连接，使用此键值时，tcp/ip的TCPInitialRTT、window ' \\\n                                 'size和可滑动窗囗将被禁止 '\n        return\n\n    if SCRIPT_USAGE == 3:\n        # EnableDeadGWDetect 禁止攻击者强制切换到备用网关\n        # 有效值：0（禁用），1（启用）\n        # 建议的数值数据： 0\n        value = getRegValue(key, 'EnableDeadGWDetect')\n        info['EnableDeadGWDetect'] = value\n        if value != 0:\n            result['risk_level'] = 2\n            result['risk_desc'] = '系统没有禁止攻击者强制切换到备用网关，无法有效抵御 SNMP 攻击。'\n            result['solution'] = '设置注册表项 HKLM\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters' \\\n                                 '下的键值：EnableDeadGWDetect = 0，系统不仅使用backlog队列，还使用附加的半连接指示，以此来处理更多的SYN连接，使用此键值时，tcp/ip' \\\n                                 '的TCPInitialRTT、window size和可滑动窗囗将被禁止 '\n        return\n\n    if SCRIPT_USAGE == 4:\n        # DisableIPSourceRouting\n        # 禁用 IP 源路由，后者允许发送者确认数据报在网络中应采用的路由。\n        # 有效值：0（转发所有数据包），1（不转发源路由数据包），2（丢弃所有传入的源路由数据包）。\n        # 建议的数值数据： 1\n        value = getRegValue(key, 'DisableIPSourceRouting')\n        info['DisableIPSourceRouting'] = value\n        if value >= 2:\n            result['risk_level'] = 1\n            result['risk_desc'] = '系统丢弃所有传入的源路由数据包。'\n            result['solution'] = '设置注册表项 HKLM\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters' \\\n                                 '下的键值：DisableIPSourceRouting = 1，禁用 IP 源路由，不允许发送者确认数据报在网络中应采用的路由。 '\n        elif value <= 0:\n            result['risk_level'] = 2\n            result['risk_desc'] = '系统转发所有数据包，攻击者可能规避 NAT 屏蔽，以便使用 IP 源路由来确定网络拓扑。'\n            result['solution'] = '设置注册表项 HKLM\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters' \\\n                                 '下的键值：DisableIPSourceRouting = 1，禁用 IP 源路由，不允许发送者确认数据报在网络中应采用的路由。 '\n\n    return\n\n\nif __name__ == '__main__':\n    _result = {}\n    process_and_anylyze(_result)\n\n    print(_result)\n",
											"description": "windows/tcpip_service.py，SCRIPT_USAGE = 2",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "C.6.3 Win抵御SNMP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Windows抵御SNMP攻击",
											"type": "text"
										},
										{
											"key": "code",
											"value": "WindowsSNMPProtect",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "38bf2c29-8bd3-4e40-855d-d80687a7040c",
											"description": "分组：Windows网络通信配置",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "#!/usr/bin/python3.7\n# coding=utf-8\nimport os\nimport winreg\n\n# SCRIPT_USAGE = 1  # 抵御 ICMP 攻击\n# SCRIPT_USAGE = 2  # 抵御 SYN 攻击\nSCRIPT_USAGE = 3  # 抵御 SNMP 攻击\n# SCRIPT_USAGE = 4  # 其它网络保护\n\n\ndef getRegValue(key, value_name):\n    try:\n        value, type = winreg.QueryValueEx(key, value_name)\n    except WindowsError:\n        value = -1\n\n    return value\n\n\ndef process_and_anylyze(result):\n    info = {}\n    result['info'] = info\n    result['risk_level'] = 0\n    result['risk_desc'] = '未发现网络配置缺陷。'\n    result['solution'] = '无'\n\n    if SCRIPT_USAGE == 1:\n        # ===================================================================\n        # 打开注册表 HKLM\\System\\CurrentControlSet\\Services\\AFD\\Parameters\n        key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r'System\\CurrentControlSet\\Services\\AFD\\Parameters')\n\n        # EnableICMPRedirect：ICMP 重定向数据包的处理\n        # 有效值：0（禁用），1（启用）。建议值：0\n        value = getRegValue(key, 'EnableICMPRedirect')\n        info['EnableICMPRedirect'] = value\n        if value != 0:\n            result['risk_level'] = 1\n            result['risk_desc'] = '没有禁用 ICMP 重定向数据包，易受到ICMP攻击。'\n            result[\n                'solution'] = '设置注册表项 HKLM\\System\\CurrentControlSet\\Services\\AFD\\Parameters下的键值：EnableICMPRedirect = 0。'\n        return\n\n    # ===================================================================\n    # 打开注册表 HKLM\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters\n    key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r'System\\CurrentControlSet\\Services\\Tcpip\\Parameters')\n\n    if SCRIPT_USAGE == 2:\n        # SynAttackProtect 机制是通过关闭某些socket选项，增加额外的连接指示和减少超时时间，使系统能处理更多的SYN连接，以达到防范SYN攻击的目的\n        # 缺省没有这个键值，系统不受 SynAttackProtect 保护。建议值：2\n        # 有效值：0，系统不受 SynAttackProtect 保护\n        # 有效值：1，系统通过减少重传次数和延迟未连接时路由缓冲项（route cache entry）防范SYN攻击\n        # 有效值：2，系统不仅使用backlog队列，还使用附加的半连接指示，以此来处理更多的SYN连接，使用此键值时，tcp/ip的TCPInitialRTT、window size和可滑动窗囗将被禁止\n        value = getRegValue(key, 'SynAttackProtect')\n        info['SynAttackProtect'] = value\n        if value == 1:\n            result['risk_level'] = 1\n            result['risk_desc'] = '系统通过减少重传次数和延迟未连接时路由缓冲项（route cache entry）防范SYN攻击，为进一步降低SYN攻击风险，可以禁止TCP/IP滑动窗口。'\n            result['solution'] = '设置注册表项 HKLM\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters下的键值：SynAttackProtect ' \\\n                                 '= 2，系统不仅使用backlog队列，还使用附加的半连接指示，以此来处理更多的SYN连接，使用此键值时，tcp/ip的TCPInitialRTT、window ' \\\n                                 'size和可滑动窗囗将被禁止 '\n        elif value <= 0:\n            result['risk_level'] = 2\n            result['risk_desc'] = '系统不受 SynAttackProtect 保护，无法有效防范SYN攻击。'\n            result['solution'] = '设置注册表项 HKLM\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters下的键值：SynAttackProtect ' \\\n                                 '= 2，系统不仅使用backlog队列，还使用附加的半连接指示，以此来处理更多的SYN连接，使用此键值时，tcp/ip的TCPInitialRTT、window ' \\\n                                 'size和可滑动窗囗将被禁止 '\n        return\n\n    if SCRIPT_USAGE == 3:\n        # EnableDeadGWDetect 禁止攻击者强制切换到备用网关\n        # 有效值：0（禁用），1（启用）\n        # 建议的数值数据： 0\n        value = getRegValue(key, 'EnableDeadGWDetect')\n        info['EnableDeadGWDetect'] = value\n        if value != 0:\n            result['risk_level'] = 2\n            result['risk_desc'] = '系统没有禁止攻击者强制切换到备用网关，无法有效抵御 SNMP 攻击。'\n            result['solution'] = '设置注册表项 HKLM\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters' \\\n                                 '下的键值：EnableDeadGWDetect = 0，系统不仅使用backlog队列，还使用附加的半连接指示，以此来处理更多的SYN连接，使用此键值时，tcp/ip' \\\n                                 '的TCPInitialRTT、window size和可滑动窗囗将被禁止 '\n        return\n\n    if SCRIPT_USAGE == 4:\n        # DisableIPSourceRouting\n        # 禁用 IP 源路由，后者允许发送者确认数据报在网络中应采用的路由。\n        # 有效值：0（转发所有数据包），1（不转发源路由数据包），2（丢弃所有传入的源路由数据包）。\n        # 建议的数值数据： 1\n        value = getRegValue(key, 'DisableIPSourceRouting')\n        info['DisableIPSourceRouting'] = value\n        if value >= 2:\n            result['risk_level'] = 1\n            result['risk_desc'] = '系统丢弃所有传入的源路由数据包。'\n            result['solution'] = '设置注册表项 HKLM\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters' \\\n                                 '下的键值：DisableIPSourceRouting = 1，禁用 IP 源路由，不允许发送者确认数据报在网络中应采用的路由。 '\n        elif value <= 0:\n            result['risk_level'] = 2\n            result['risk_desc'] = '系统转发所有数据包，攻击者可能规避 NAT 屏蔽，以便使用 IP 源路由来确定网络拓扑。'\n            result['solution'] = '设置注册表项 HKLM\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters' \\\n                                 '下的键值：DisableIPSourceRouting = 1，禁用 IP 源路由，不允许发送者确认数据报在网络中应采用的路由。 '\n\n    return\n\n\nif __name__ == '__main__':\n    _result = {}\n    process_and_anylyze(_result)\n\n    print(_result)\n",
											"description": "windows/tcpip_service.py，SCRIPT_USAGE = 3",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "C.6.4 Win禁用IP源路由",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Windows禁用IP源路由",
											"type": "text"
										},
										{
											"key": "code",
											"value": "WindowsDisableIPSourceRoute",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "38bf2c29-8bd3-4e40-855d-d80687a7040c",
											"description": "分组：Windows网络通信配置",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "#!/usr/bin/python3.7\n# coding=utf-8\nimport os\nimport winreg\n\n# SCRIPT_USAGE = 1  # 抵御 ICMP 攻击\n# SCRIPT_USAGE = 2  # 抵御 SYN 攻击\n# SCRIPT_USAGE = 3  # 抵御 SNMP 攻击\nSCRIPT_USAGE = 4  # 其它网络保护\n\n\ndef getRegValue(key, value_name):\n    try:\n        value, type = winreg.QueryValueEx(key, value_name)\n    except WindowsError:\n        value = -1\n\n    return value\n\n\ndef process_and_anylyze(result):\n    info = {}\n    result['info'] = info\n    result['risk_level'] = 0\n    result['risk_desc'] = '未发现网络配置缺陷。'\n    result['solution'] = '无'\n\n    if SCRIPT_USAGE == 1:\n        # ===================================================================\n        # 打开注册表 HKLM\\System\\CurrentControlSet\\Services\\AFD\\Parameters\n        key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r'System\\CurrentControlSet\\Services\\AFD\\Parameters')\n\n        # EnableICMPRedirect：ICMP 重定向数据包的处理\n        # 有效值：0（禁用），1（启用）。建议值：0\n        value = getRegValue(key, 'EnableICMPRedirect')\n        info['EnableICMPRedirect'] = value\n        if value != 0:\n            result['risk_level'] = 1\n            result['risk_desc'] = '没有禁用 ICMP 重定向数据包，易受到ICMP攻击。'\n            result[\n                'solution'] = '设置注册表项 HKLM\\System\\CurrentControlSet\\Services\\AFD\\Parameters下的键值：EnableICMPRedirect = 0。'\n        return\n\n    # ===================================================================\n    # 打开注册表 HKLM\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters\n    key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r'System\\CurrentControlSet\\Services\\Tcpip\\Parameters')\n\n    if SCRIPT_USAGE == 2:\n        # SynAttackProtect 机制是通过关闭某些socket选项，增加额外的连接指示和减少超时时间，使系统能处理更多的SYN连接，以达到防范SYN攻击的目的\n        # 缺省没有这个键值，系统不受 SynAttackProtect 保护。建议值：2\n        # 有效值：0，系统不受 SynAttackProtect 保护\n        # 有效值：1，系统通过减少重传次数和延迟未连接时路由缓冲项（route cache entry）防范SYN攻击\n        # 有效值：2，系统不仅使用backlog队列，还使用附加的半连接指示，以此来处理更多的SYN连接，使用此键值时，tcp/ip的TCPInitialRTT、window size和可滑动窗囗将被禁止\n        value = getRegValue(key, 'SynAttackProtect')\n        info['SynAttackProtect'] = value\n        if value == 1:\n            result['risk_level'] = 1\n            result['risk_desc'] = '系统通过减少重传次数和延迟未连接时路由缓冲项（route cache entry）防范SYN攻击，为进一步降低SYN攻击风险，可以禁止TCP/IP滑动窗口。'\n            result['solution'] = '设置注册表项 HKLM\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters下的键值：SynAttackProtect ' \\\n                                 '= 2，系统不仅使用backlog队列，还使用附加的半连接指示，以此来处理更多的SYN连接，使用此键值时，tcp/ip的TCPInitialRTT、window ' \\\n                                 'size和可滑动窗囗将被禁止 '\n        elif value <= 0:\n            result['risk_level'] = 2\n            result['risk_desc'] = '系统不受 SynAttackProtect 保护，无法有效防范SYN攻击。'\n            result['solution'] = '设置注册表项 HKLM\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters下的键值：SynAttackProtect ' \\\n                                 '= 2，系统不仅使用backlog队列，还使用附加的半连接指示，以此来处理更多的SYN连接，使用此键值时，tcp/ip的TCPInitialRTT、window ' \\\n                                 'size和可滑动窗囗将被禁止 '\n        return\n\n    if SCRIPT_USAGE == 3:\n        # EnableDeadGWDetect 禁止攻击者强制切换到备用网关\n        # 有效值：0（禁用），1（启用）\n        # 建议的数值数据： 0\n        value = getRegValue(key, 'EnableDeadGWDetect')\n        info['EnableDeadGWDetect'] = value\n        if value != 0:\n            result['risk_level'] = 2\n            result['risk_desc'] = '系统没有禁止攻击者强制切换到备用网关，无法有效抵御 SNMP 攻击。'\n            result['solution'] = '设置注册表项 HKLM\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters' \\\n                                 '下的键值：EnableDeadGWDetect = 0，系统不仅使用backlog队列，还使用附加的半连接指示，以此来处理更多的SYN连接，使用此键值时，tcp/ip' \\\n                                 '的TCPInitialRTT、window size和可滑动窗囗将被禁止 '\n        return\n\n    if SCRIPT_USAGE == 4:\n        # DisableIPSourceRouting\n        # 禁用 IP 源路由，后者允许发送者确认数据报在网络中应采用的路由。\n        # 有效值：0（转发所有数据包），1（不转发源路由数据包），2（丢弃所有传入的源路由数据包）。\n        # 建议的数值数据： 1\n        value = getRegValue(key, 'DisableIPSourceRouting')\n        info['DisableIPSourceRouting'] = value\n        if value >= 2:\n            result['risk_level'] = 1\n            result['risk_desc'] = '系统丢弃所有传入的源路由数据包。'\n            result['solution'] = '设置注册表项 HKLM\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters' \\\n                                 '下的键值：DisableIPSourceRouting = 1，禁用 IP 源路由，不允许发送者确认数据报在网络中应采用的路由。 '\n        elif value <= 0:\n            result['risk_level'] = 2\n            result['risk_desc'] = '系统转发所有数据包，攻击者可能规避 NAT 屏蔽，以便使用 IP 源路由来确定网络拓扑。'\n            result['solution'] = '设置注册表项 HKLM\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters' \\\n                                 '下的键值：DisableIPSourceRouting = 1，禁用 IP 源路由，不允许发送者确认数据报在网络中应采用的路由。 '\n\n    return\n\n\nif __name__ == '__main__':\n    _result = {}\n    process_and_anylyze(_result)\n\n    print(_result)\n",
											"description": "windows/tcpip_service.py，SCRIPT_USAGE = 4",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "C.6.5 Win检查被动关闭端口",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Windows检查被动关闭端口",
											"type": "text"
										},
										{
											"key": "code",
											"value": "WindowsCloseWaitPort",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "38bf2c29-8bd3-4e40-855d-d80687a7040c",
											"description": "分组：Windows网络通信配置",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "#!/usr/bin/python3.7\n# coding=utf-8\nimport os\nimport re\n\n\ndef process(result):\n    info = []\n    result['info'] = info\n    result['risk_level'] = 0\n    result['risk_desc'] = '未发现网络端口问题。'\n    result['solution'] = '无'\n\n    # 检查网络通信TCP端口\n    r = os.system(\"netstat -an -p TCP > netPort.log\")\n    output = open(\"netPort.log\", 'r').readlines()\n\n    # 解析每条TCP连接的信息\n    close_wait_count = 0\n    for index in range(4, len(output)):\n        # 提取行信息到数组中\n        # re.split(r'\\s+', output[index])也可实现同样效果\n        line = re.sub(' +', ' ', output[index].strip('\\n'))\n        item = line.split(' ')\n        connect_info = {\n            'protocol': item[1],\n            'local_ip': item[2],\n            'remote_ip': item[3],\n            'status': item[4],\n        }\n        info.append(connect_info)\n        # 保存 CLOSE_WAIT 状态的连接数\n        if item[4] == 'CLOSE_WAIT':\n            close_wait_count += 1\n\n    # 检查是否有过多的 CLOSE_WAIT 连接，以50为阈值\n    if close_wait_count > 50:\n        result['risk_level'] = 1\n        result['risk_desc'] = '大量端口（共计{}个）处于CLOSE_WAIT状态，有可能恶意程序在消耗本系统的资源。'.format(close_wait_count)\n        result['solution'] = '设置注册表项 HKLM\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters下的键值：KeepAliveTime < ' \\\n                             '300000，以使被动关闭的端口能尽早释放出来。 '\n\n    os.remove(\"netPort.log\")\n\n    return\n\n\nif __name__ == '__main__':\n    _result = {}\n    process(_result)\n\n    print(_result)\n",
											"description": "windows/netstat_info.py",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "C.7 Win日志审计配置",
					"item": [
						{
							"name": "C.7.1 Win登录日志审核",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Windows登录日志审核",
											"type": "text"
										},
										{
											"key": "code",
											"value": "WindowsLogonAudit",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "88b73bae-1d44-4c1b-914b-16a25c801c4e",
											"description": "分组：Windows日志审计配置",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "#!/usr/bin/python3.7\n# coding=utf-8\n\nimport configparser\nimport codecs\nimport os\n\n# 本脚本用于多条审计策略\nSCRIPT_USAGE = 1    # 登录日志审计策略\n# SCRIPT_USAGE = 2    # 系统事件审计策略\n# SCRIPT_USAGE = 3    # 对象访问事件审计策略\n# SCRIPT_USAGE = 4  # 特权使用事件审计策略\n# SCRIPT_USAGE = 5    # 策略更改事件审计策略\n# SCRIPT_USAGE = 6    # 账户管理事件审计策略\n# SCRIPT_USAGE = 7    # 过程追踪事件审计策略\n# SCRIPT_USAGE = 8    # 目录服务事件审计策略\n# SCRIPT_USAGE = 9    # 账户登录事件审计策略\n\nINVALID = '-1'\n\n\nclass Config:\n    def __init__(self, path):\n        self.path = path\n        self.cf = configparser.ConfigParser()\n        self.cf.read_file(codecs.open(self.path, \"r\", \"utf_16\"))\n        s = self.cf.sections()\n\n    def get(self, field, key):\n        try:\n            result = str(self.cf.get(field, key))\n        except:\n            return INVALID\n        return result\n\n    def set(self, field, key, value):\n        self.cf.set(field, key, value)\n        self.cf.write(open(self.path, 'w'))\n        return True\n\n\ndef process(info):\n    output = os.system(\"secedit /export /cfg Password.ini\")\n\n    cf = Config(\"Password.ini\")\n\n    info[\"Audit AuditLogonEvents\"] = cf.get(\"Event Audit\", \"AuditLogonEvents\")\n    info[\"Audit AuditSystemEvents\"] = cf.get(\"Event Audit\", \"AuditSystemEvents\")\n    info[\"Audit AuditObjectAccess\"] = cf.get(\"Event Audit\", \"AuditObjectAccess\")\n    info[\"Audit AuditPrivilegeUse\"] = cf.get(\"Event Audit\", \"AuditPrivilegeUse\")\n    info[\"Audit AuditPolicyChange\"] = cf.get(\"Event Audit\", \"AuditPolicyChange\")\n    info[\"Audit AuditAccountManage\"] = cf.get(\"Event Audit\", \"AuditAccountManage\")\n    info[\"Audit AuditProcessTracking\"] = cf.get(\"Event Audit\", \"AuditProcessTracking\")\n    info[\"Audit AuditDSAccess\"] = cf.get(\"Event Audit\", \"AuditDSAccess\")\n    info[\"Audit AuditAccountLogon\"] = cf.get(\"Event Audit\", \"AuditAccountLogon\")\n\n    os.remove('Password.ini')\n\n    return\n\n\ndef check_audit(audit_key, audit_type):\n    info = result['info']\n    value = info['Audit ' + audit_key]\n    if int(value) == 3:\n        result['risk_level'] = 0\n        result['risk_desc'] = f'{audit_type}审计策略配置正确'\n        result['solution'] = '无'\n    elif int(value) == 0:\n        result['risk_level'] = 2\n        result['risk_desc'] = f'系统没有配置{audit_type}审计策略，存在较严重的审计缺陷'\n        result['solution'] = f'设置{audit_key}的审计策略为：成功事件+失败事件。'\n    elif int(value) == 1:\n        result['risk_level'] = 1\n        result['risk_desc'] = f'系统只配置了{audit_type}的成功事件审计'\n        result['solution'] = f'设置{audit_key}的审计策略为：成功事件+失败事件。'\n    elif int(value) == 2:\n        result['risk_level'] = 1\n        result['risk_desc'] = f'系统只配置了{audit_type}的失败事件审计'\n        result['solution'] = f'设置{audit_key}的审计策略为：成功事件+失败事件。'\n\n\n# 检查审计策略的设定值：\n# 0：不审计\n# 1：审计成功事件\n# 2：审计失败事件\n# 3：审计成功、失败事件\ndef analyze(result):\n    info = result['info']\n    result['risk_level'] = 0\n    result['risk_desc'] = '审计策略配置正确'\n    result['solution'] = '无'\n\n    # 登录日志审计策略\n    if SCRIPT_USAGE == 1:\n        check_audit('AuditLogonEvents', '登录')\n\n    # 系统事件审计策略\n    if SCRIPT_USAGE == 2:\n        check_audit('AuditSystemEvents', '系统')\n\n    # 对象访问事件审计策略\n    if SCRIPT_USAGE == 3:\n        check_audit('AuditObjectAccess', '对象访问')\n\n    # 特权使用事件审计策略\n    if SCRIPT_USAGE == 4:\n        check_audit('AuditPrivilegeUse', '特权使用')\n\n    # 策略更改事件审计策略\n    if SCRIPT_USAGE == 5:\n        check_audit('AuditPolicyChange', '策略更改')\n\n    # 账户管理事件审计策略\n    if SCRIPT_USAGE == 6:\n        check_audit('AuditAccountManage', '账户管理')\n\n    # 过程追踪事件审计策略\n    if SCRIPT_USAGE == 7:\n        check_audit('AuditProcessTracking', '过程追踪')\n\n    # 目录服务事件审计策略\n    if SCRIPT_USAGE == 8:\n        check_audit('AuditDSAccess', '目录服务')\n\n    # 账户登录事件审计策略\n    if SCRIPT_USAGE == 9:\n        check_audit('AuditAccountLogon', '账户登录')\n\n\n    return\n\n\nif __name__ == '__main__':\n    info = {}\n    process(info)\n\n    result = {'info': info}\n    analyze(result)\n\n    print(result)\n",
											"description": "windows/audit_policy.py, SCRIPT_USAGE = 1",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "C.7.2 Win系统事件审核",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Windows系统事件审核",
											"type": "text"
										},
										{
											"key": "code",
											"value": "WindowsSystemEventAudit",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "88b73bae-1d44-4c1b-914b-16a25c801c4e",
											"description": "分组：Windows日志审计配置",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "#!/usr/bin/python3.7\n# coding=utf-8\n\nimport configparser\nimport codecs\nimport os\n\n# 本脚本用于多条审计策略\n# SCRIPT_USAGE = 1    # 登录日志审计策略\nSCRIPT_USAGE = 2    # 系统事件审计策略\n# SCRIPT_USAGE = 3    # 对象访问事件审计策略\n# SCRIPT_USAGE = 4  # 特权使用事件审计策略\n# SCRIPT_USAGE = 5    # 策略更改事件审计策略\n# SCRIPT_USAGE = 6    # 账户管理事件审计策略\n# SCRIPT_USAGE = 7    # 过程追踪事件审计策略\n# SCRIPT_USAGE = 8    # 目录服务事件审计策略\n# SCRIPT_USAGE = 9    # 账户登录事件审计策略\n\nINVALID = '-1'\n\n\nclass Config:\n    def __init__(self, path):\n        self.path = path\n        self.cf = configparser.ConfigParser()\n        self.cf.read_file(codecs.open(self.path, \"r\", \"utf_16\"))\n        s = self.cf.sections()\n\n    def get(self, field, key):\n        try:\n            result = str(self.cf.get(field, key))\n        except:\n            return INVALID\n        return result\n\n    def set(self, field, key, value):\n        self.cf.set(field, key, value)\n        self.cf.write(open(self.path, 'w'))\n        return True\n\n\ndef process(info):\n    output = os.system(\"secedit /export /cfg Password.ini\")\n\n    cf = Config(\"Password.ini\")\n\n    info[\"Audit AuditLogonEvents\"] = cf.get(\"Event Audit\", \"AuditLogonEvents\")\n    info[\"Audit AuditSystemEvents\"] = cf.get(\"Event Audit\", \"AuditSystemEvents\")\n    info[\"Audit AuditObjectAccess\"] = cf.get(\"Event Audit\", \"AuditObjectAccess\")\n    info[\"Audit AuditPrivilegeUse\"] = cf.get(\"Event Audit\", \"AuditPrivilegeUse\")\n    info[\"Audit AuditPolicyChange\"] = cf.get(\"Event Audit\", \"AuditPolicyChange\")\n    info[\"Audit AuditAccountManage\"] = cf.get(\"Event Audit\", \"AuditAccountManage\")\n    info[\"Audit AuditProcessTracking\"] = cf.get(\"Event Audit\", \"AuditProcessTracking\")\n    info[\"Audit AuditDSAccess\"] = cf.get(\"Event Audit\", \"AuditDSAccess\")\n    info[\"Audit AuditAccountLogon\"] = cf.get(\"Event Audit\", \"AuditAccountLogon\")\n\n    os.remove('Password.ini')\n\n    return\n\n\ndef check_audit(audit_key, audit_type):\n    info = result['info']\n    value = info['Audit ' + audit_key]\n    if int(value) == 3:\n        result['risk_level'] = 0\n        result['risk_desc'] = f'{audit_type}审计策略配置正确'\n        result['solution'] = '无'\n    elif int(value) == 0:\n        result['risk_level'] = 2\n        result['risk_desc'] = f'系统没有配置{audit_type}审计策略，存在较严重的审计缺陷'\n        result['solution'] = f'设置{audit_key}的审计策略为：成功事件+失败事件。'\n    elif int(value) == 1:\n        result['risk_level'] = 1\n        result['risk_desc'] = f'系统只配置了{audit_type}的成功事件审计'\n        result['solution'] = f'设置{audit_key}的审计策略为：成功事件+失败事件。'\n    elif int(value) == 2:\n        result['risk_level'] = 1\n        result['risk_desc'] = f'系统只配置了{audit_type}的失败事件审计'\n        result['solution'] = f'设置{audit_key}的审计策略为：成功事件+失败事件。'\n\n\n# 检查审计策略的设定值：\n# 0：不审计\n# 1：审计成功事件\n# 2：审计失败事件\n# 3：审计成功、失败事件\ndef analyze(result):\n    info = result['info']\n    result['risk_level'] = 0\n    result['risk_desc'] = '审计策略配置正确'\n    result['solution'] = '无'\n\n    # 登录日志审计策略\n    if SCRIPT_USAGE == 1:\n        check_audit('AuditLogonEvents', '登录')\n\n    # 系统事件审计策略\n    if SCRIPT_USAGE == 2:\n        check_audit('AuditSystemEvents', '系统')\n\n    # 对象访问事件审计策略\n    if SCRIPT_USAGE == 3:\n        check_audit('AuditObjectAccess', '对象访问')\n\n    # 特权使用事件审计策略\n    if SCRIPT_USAGE == 4:\n        check_audit('AuditPrivilegeUse', '特权使用')\n\n    # 策略更改事件审计策略\n    if SCRIPT_USAGE == 5:\n        check_audit('AuditPolicyChange', '策略更改')\n\n    # 账户管理事件审计策略\n    if SCRIPT_USAGE == 6:\n        check_audit('AuditAccountManage', '账户管理')\n\n    # 过程追踪事件审计策略\n    if SCRIPT_USAGE == 7:\n        check_audit('AuditProcessTracking', '过程追踪')\n\n    # 目录服务事件审计策略\n    if SCRIPT_USAGE == 8:\n        check_audit('AuditDSAccess', '目录服务')\n\n    # 账户登录事件审计策略\n    if SCRIPT_USAGE == 9:\n        check_audit('AuditAccountLogon', '账户登录')\n\n\n    return\n\n\nif __name__ == '__main__':\n    info = {}\n    process(info)\n\n    result = {'info': info}\n    analyze(result)\n\n    print(result)\n",
											"description": "windows/audit_policy.py, SCRIPT_USAGE = 2",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "C.7.3 Win对象访问事件审核",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Windows对象访问事件审核",
											"type": "text"
										},
										{
											"key": "code",
											"value": "WindowsObjectAccessAudit",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "88b73bae-1d44-4c1b-914b-16a25c801c4e",
											"description": "分组：Windows日志审计配置",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "#!/usr/bin/python3.7\n# coding=utf-8\n\nimport configparser\nimport codecs\nimport os\n\n# 本脚本用于多条审计策略\n# SCRIPT_USAGE = 1    # 登录日志审计策略\n# SCRIPT_USAGE = 2    # 系统事件审计策略\nSCRIPT_USAGE = 3    # 对象访问事件审计策略\n# SCRIPT_USAGE = 4  # 特权使用事件审计策略\n# SCRIPT_USAGE = 5    # 策略更改事件审计策略\n# SCRIPT_USAGE = 6    # 账户管理事件审计策略\n# SCRIPT_USAGE = 7    # 过程追踪事件审计策略\n# SCRIPT_USAGE = 8    # 目录服务事件审计策略\n# SCRIPT_USAGE = 9    # 账户登录事件审计策略\n\nINVALID = '-1'\n\n\nclass Config:\n    def __init__(self, path):\n        self.path = path\n        self.cf = configparser.ConfigParser()\n        self.cf.read_file(codecs.open(self.path, \"r\", \"utf_16\"))\n        s = self.cf.sections()\n\n    def get(self, field, key):\n        try:\n            result = str(self.cf.get(field, key))\n        except:\n            return INVALID\n        return result\n\n    def set(self, field, key, value):\n        self.cf.set(field, key, value)\n        self.cf.write(open(self.path, 'w'))\n        return True\n\n\ndef process(info):\n    output = os.system(\"secedit /export /cfg Password.ini\")\n\n    cf = Config(\"Password.ini\")\n\n    info[\"Audit AuditLogonEvents\"] = cf.get(\"Event Audit\", \"AuditLogonEvents\")\n    info[\"Audit AuditSystemEvents\"] = cf.get(\"Event Audit\", \"AuditSystemEvents\")\n    info[\"Audit AuditObjectAccess\"] = cf.get(\"Event Audit\", \"AuditObjectAccess\")\n    info[\"Audit AuditPrivilegeUse\"] = cf.get(\"Event Audit\", \"AuditPrivilegeUse\")\n    info[\"Audit AuditPolicyChange\"] = cf.get(\"Event Audit\", \"AuditPolicyChange\")\n    info[\"Audit AuditAccountManage\"] = cf.get(\"Event Audit\", \"AuditAccountManage\")\n    info[\"Audit AuditProcessTracking\"] = cf.get(\"Event Audit\", \"AuditProcessTracking\")\n    info[\"Audit AuditDSAccess\"] = cf.get(\"Event Audit\", \"AuditDSAccess\")\n    info[\"Audit AuditAccountLogon\"] = cf.get(\"Event Audit\", \"AuditAccountLogon\")\n\n    os.remove('Password.ini')\n\n    return\n\n\ndef check_audit(audit_key, audit_type):\n    info = result['info']\n    value = info['Audit ' + audit_key]\n    if int(value) == 3:\n        result['risk_level'] = 0\n        result['risk_desc'] = f'{audit_type}审计策略配置正确'\n        result['solution'] = '无'\n    elif int(value) == 0:\n        result['risk_level'] = 2\n        result['risk_desc'] = f'系统没有配置{audit_type}审计策略，存在较严重的审计缺陷'\n        result['solution'] = f'设置{audit_key}的审计策略为：成功事件+失败事件。'\n    elif int(value) == 1:\n        result['risk_level'] = 1\n        result['risk_desc'] = f'系统只配置了{audit_type}的成功事件审计'\n        result['solution'] = f'设置{audit_key}的审计策略为：成功事件+失败事件。'\n    elif int(value) == 2:\n        result['risk_level'] = 1\n        result['risk_desc'] = f'系统只配置了{audit_type}的失败事件审计'\n        result['solution'] = f'设置{audit_key}的审计策略为：成功事件+失败事件。'\n\n\n# 检查审计策略的设定值：\n# 0：不审计\n# 1：审计成功事件\n# 2：审计失败事件\n# 3：审计成功、失败事件\ndef analyze(result):\n    info = result['info']\n    result['risk_level'] = 0\n    result['risk_desc'] = '审计策略配置正确'\n    result['solution'] = '无'\n\n    # 登录日志审计策略\n    if SCRIPT_USAGE == 1:\n        check_audit('AuditLogonEvents', '登录')\n\n    # 系统事件审计策略\n    if SCRIPT_USAGE == 2:\n        check_audit('AuditSystemEvents', '系统')\n\n    # 对象访问事件审计策略\n    if SCRIPT_USAGE == 3:\n        check_audit('AuditObjectAccess', '对象访问')\n\n    # 特权使用事件审计策略\n    if SCRIPT_USAGE == 4:\n        check_audit('AuditPrivilegeUse', '特权使用')\n\n    # 策略更改事件审计策略\n    if SCRIPT_USAGE == 5:\n        check_audit('AuditPolicyChange', '策略更改')\n\n    # 账户管理事件审计策略\n    if SCRIPT_USAGE == 6:\n        check_audit('AuditAccountManage', '账户管理')\n\n    # 过程追踪事件审计策略\n    if SCRIPT_USAGE == 7:\n        check_audit('AuditProcessTracking', '过程追踪')\n\n    # 目录服务事件审计策略\n    if SCRIPT_USAGE == 8:\n        check_audit('AuditDSAccess', '目录服务')\n\n    # 账户登录事件审计策略\n    if SCRIPT_USAGE == 9:\n        check_audit('AuditAccountLogon', '账户登录')\n\n\n    return\n\n\nif __name__ == '__main__':\n    info = {}\n    process(info)\n\n    result = {'info': info}\n    analyze(result)\n\n    print(result)\n",
											"description": "windows/audit_policy.py, SCRIPT_USAGE = 3",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "C.7.4 Win特权使用事件审核",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Windows特权使用事件审核",
											"type": "text"
										},
										{
											"key": "code",
											"value": "WindowsPrivilegeAudit",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "88b73bae-1d44-4c1b-914b-16a25c801c4e",
											"description": "分组：Windows日志审计配置",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "#!/usr/bin/python3.7\n# coding=utf-8\n\nimport configparser\nimport codecs\nimport os\n\n# 本脚本用于多条审计策略\n# SCRIPT_USAGE = 1    # 登录日志审计策略\n# SCRIPT_USAGE = 2    # 系统事件审计策略\n# SCRIPT_USAGE = 3    # 对象访问事件审计策略\nSCRIPT_USAGE = 4  # 特权使用事件审计策略\n# SCRIPT_USAGE = 5    # 策略更改事件审计策略\n# SCRIPT_USAGE = 6    # 账户管理事件审计策略\n# SCRIPT_USAGE = 7    # 过程追踪事件审计策略\n# SCRIPT_USAGE = 8    # 目录服务事件审计策略\n# SCRIPT_USAGE = 9    # 账户登录事件审计策略\n\nINVALID = '-1'\n\n\nclass Config:\n    def __init__(self, path):\n        self.path = path\n        self.cf = configparser.ConfigParser()\n        self.cf.read_file(codecs.open(self.path, \"r\", \"utf_16\"))\n        s = self.cf.sections()\n\n    def get(self, field, key):\n        try:\n            result = str(self.cf.get(field, key))\n        except:\n            return INVALID\n        return result\n\n    def set(self, field, key, value):\n        self.cf.set(field, key, value)\n        self.cf.write(open(self.path, 'w'))\n        return True\n\n\ndef process(info):\n    output = os.system(\"secedit /export /cfg Password.ini\")\n\n    cf = Config(\"Password.ini\")\n\n    info[\"Audit AuditLogonEvents\"] = cf.get(\"Event Audit\", \"AuditLogonEvents\")\n    info[\"Audit AuditSystemEvents\"] = cf.get(\"Event Audit\", \"AuditSystemEvents\")\n    info[\"Audit AuditObjectAccess\"] = cf.get(\"Event Audit\", \"AuditObjectAccess\")\n    info[\"Audit AuditPrivilegeUse\"] = cf.get(\"Event Audit\", \"AuditPrivilegeUse\")\n    info[\"Audit AuditPolicyChange\"] = cf.get(\"Event Audit\", \"AuditPolicyChange\")\n    info[\"Audit AuditAccountManage\"] = cf.get(\"Event Audit\", \"AuditAccountManage\")\n    info[\"Audit AuditProcessTracking\"] = cf.get(\"Event Audit\", \"AuditProcessTracking\")\n    info[\"Audit AuditDSAccess\"] = cf.get(\"Event Audit\", \"AuditDSAccess\")\n    info[\"Audit AuditAccountLogon\"] = cf.get(\"Event Audit\", \"AuditAccountLogon\")\n\n    os.remove('Password.ini')\n\n    return\n\n\ndef check_audit(audit_key, audit_type):\n    info = result['info']\n    value = info['Audit ' + audit_key]\n    if int(value) == 3:\n        result['risk_level'] = 0\n        result['risk_desc'] = f'{audit_type}审计策略配置正确'\n        result['solution'] = '无'\n    elif int(value) == 0:\n        result['risk_level'] = 2\n        result['risk_desc'] = f'系统没有配置{audit_type}审计策略，存在较严重的审计缺陷'\n        result['solution'] = f'设置{audit_key}的审计策略为：成功事件+失败事件。'\n    elif int(value) == 1:\n        result['risk_level'] = 1\n        result['risk_desc'] = f'系统只配置了{audit_type}的成功事件审计'\n        result['solution'] = f'设置{audit_key}的审计策略为：成功事件+失败事件。'\n    elif int(value) == 2:\n        result['risk_level'] = 1\n        result['risk_desc'] = f'系统只配置了{audit_type}的失败事件审计'\n        result['solution'] = f'设置{audit_key}的审计策略为：成功事件+失败事件。'\n\n\n# 检查审计策略的设定值：\n# 0：不审计\n# 1：审计成功事件\n# 2：审计失败事件\n# 3：审计成功、失败事件\ndef analyze(result):\n    info = result['info']\n    result['risk_level'] = 0\n    result['risk_desc'] = '审计策略配置正确'\n    result['solution'] = '无'\n\n    # 登录日志审计策略\n    if SCRIPT_USAGE == 1:\n        check_audit('AuditLogonEvents', '登录')\n\n    # 系统事件审计策略\n    if SCRIPT_USAGE == 2:\n        check_audit('AuditSystemEvents', '系统')\n\n    # 对象访问事件审计策略\n    if SCRIPT_USAGE == 3:\n        check_audit('AuditObjectAccess', '对象访问')\n\n    # 特权使用事件审计策略\n    if SCRIPT_USAGE == 4:\n        check_audit('AuditPrivilegeUse', '特权使用')\n\n    # 策略更改事件审计策略\n    if SCRIPT_USAGE == 5:\n        check_audit('AuditPolicyChange', '策略更改')\n\n    # 账户管理事件审计策略\n    if SCRIPT_USAGE == 6:\n        check_audit('AuditAccountManage', '账户管理')\n\n    # 过程追踪事件审计策略\n    if SCRIPT_USAGE == 7:\n        check_audit('AuditProcessTracking', '过程追踪')\n\n    # 目录服务事件审计策略\n    if SCRIPT_USAGE == 8:\n        check_audit('AuditDSAccess', '目录服务')\n\n    # 账户登录事件审计策略\n    if SCRIPT_USAGE == 9:\n        check_audit('AuditAccountLogon', '账户登录')\n\n\n    return\n\n\nif __name__ == '__main__':\n    info = {}\n    process(info)\n\n    result = {'info': info}\n    analyze(result)\n\n    print(result)\n",
											"description": "windows/audit_policy.py, SCRIPT_USAGE = 4",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "C.7.5 Win策略更改事件审核",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Windows策略更改事件审核",
											"type": "text"
										},
										{
											"key": "code",
											"value": "WindowsPolicyChangeAudit",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "88b73bae-1d44-4c1b-914b-16a25c801c4e",
											"description": "分组：Windows日志审计配置",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "#!/usr/bin/python3.7\n# coding=utf-8\n\nimport configparser\nimport codecs\nimport os\n\n# 本脚本用于多条审计策略\n# SCRIPT_USAGE = 1    # 登录日志审计策略\n# SCRIPT_USAGE = 2    # 系统事件审计策略\n# SCRIPT_USAGE = 3    # 对象访问事件审计策略\n# SCRIPT_USAGE = 4  # 特权使用事件审计策略\nSCRIPT_USAGE = 5    # 策略更改事件审计策略\n# SCRIPT_USAGE = 6    # 账户管理事件审计策略\n# SCRIPT_USAGE = 7    # 过程追踪事件审计策略\n# SCRIPT_USAGE = 8    # 目录服务事件审计策略\n# SCRIPT_USAGE = 9    # 账户登录事件审计策略\n\nINVALID = '-1'\n\n\nclass Config:\n    def __init__(self, path):\n        self.path = path\n        self.cf = configparser.ConfigParser()\n        self.cf.read_file(codecs.open(self.path, \"r\", \"utf_16\"))\n        s = self.cf.sections()\n\n    def get(self, field, key):\n        try:\n            result = str(self.cf.get(field, key))\n        except:\n            return INVALID\n        return result\n\n    def set(self, field, key, value):\n        self.cf.set(field, key, value)\n        self.cf.write(open(self.path, 'w'))\n        return True\n\n\ndef process(info):\n    output = os.system(\"secedit /export /cfg Password.ini\")\n\n    cf = Config(\"Password.ini\")\n\n    info[\"Audit AuditLogonEvents\"] = cf.get(\"Event Audit\", \"AuditLogonEvents\")\n    info[\"Audit AuditSystemEvents\"] = cf.get(\"Event Audit\", \"AuditSystemEvents\")\n    info[\"Audit AuditObjectAccess\"] = cf.get(\"Event Audit\", \"AuditObjectAccess\")\n    info[\"Audit AuditPrivilegeUse\"] = cf.get(\"Event Audit\", \"AuditPrivilegeUse\")\n    info[\"Audit AuditPolicyChange\"] = cf.get(\"Event Audit\", \"AuditPolicyChange\")\n    info[\"Audit AuditAccountManage\"] = cf.get(\"Event Audit\", \"AuditAccountManage\")\n    info[\"Audit AuditProcessTracking\"] = cf.get(\"Event Audit\", \"AuditProcessTracking\")\n    info[\"Audit AuditDSAccess\"] = cf.get(\"Event Audit\", \"AuditDSAccess\")\n    info[\"Audit AuditAccountLogon\"] = cf.get(\"Event Audit\", \"AuditAccountLogon\")\n\n    os.remove('Password.ini')\n\n    return\n\n\ndef check_audit(audit_key, audit_type):\n    info = result['info']\n    value = info['Audit ' + audit_key]\n    if int(value) == 3:\n        result['risk_level'] = 0\n        result['risk_desc'] = f'{audit_type}审计策略配置正确'\n        result['solution'] = '无'\n    elif int(value) == 0:\n        result['risk_level'] = 2\n        result['risk_desc'] = f'系统没有配置{audit_type}审计策略，存在较严重的审计缺陷'\n        result['solution'] = f'设置{audit_key}的审计策略为：成功事件+失败事件。'\n    elif int(value) == 1:\n        result['risk_level'] = 1\n        result['risk_desc'] = f'系统只配置了{audit_type}的成功事件审计'\n        result['solution'] = f'设置{audit_key}的审计策略为：成功事件+失败事件。'\n    elif int(value) == 2:\n        result['risk_level'] = 1\n        result['risk_desc'] = f'系统只配置了{audit_type}的失败事件审计'\n        result['solution'] = f'设置{audit_key}的审计策略为：成功事件+失败事件。'\n\n\n# 检查审计策略的设定值：\n# 0：不审计\n# 1：审计成功事件\n# 2：审计失败事件\n# 3：审计成功、失败事件\ndef analyze(result):\n    info = result['info']\n    result['risk_level'] = 0\n    result['risk_desc'] = '审计策略配置正确'\n    result['solution'] = '无'\n\n    # 登录日志审计策略\n    if SCRIPT_USAGE == 1:\n        check_audit('AuditLogonEvents', '登录')\n\n    # 系统事件审计策略\n    if SCRIPT_USAGE == 2:\n        check_audit('AuditSystemEvents', '系统')\n\n    # 对象访问事件审计策略\n    if SCRIPT_USAGE == 3:\n        check_audit('AuditObjectAccess', '对象访问')\n\n    # 特权使用事件审计策略\n    if SCRIPT_USAGE == 4:\n        check_audit('AuditPrivilegeUse', '特权使用')\n\n    # 策略更改事件审计策略\n    if SCRIPT_USAGE == 5:\n        check_audit('AuditPolicyChange', '策略更改')\n\n    # 账户管理事件审计策略\n    if SCRIPT_USAGE == 6:\n        check_audit('AuditAccountManage', '账户管理')\n\n    # 过程追踪事件审计策略\n    if SCRIPT_USAGE == 7:\n        check_audit('AuditProcessTracking', '过程追踪')\n\n    # 目录服务事件审计策略\n    if SCRIPT_USAGE == 8:\n        check_audit('AuditDSAccess', '目录服务')\n\n    # 账户登录事件审计策略\n    if SCRIPT_USAGE == 9:\n        check_audit('AuditAccountLogon', '账户登录')\n\n\n    return\n\n\nif __name__ == '__main__':\n    info = {}\n    process(info)\n\n    result = {'info': info}\n    analyze(result)\n\n    print(result)\n",
											"description": "windows/audit_policy.py, SCRIPT_USAGE = 5",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "C.7.6 Win账户管理事件审核",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Windows账户管理事件审核",
											"type": "text"
										},
										{
											"key": "code",
											"value": "WindowsAccountManageAudit",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "88b73bae-1d44-4c1b-914b-16a25c801c4e",
											"description": "分组：Windows日志审计配置",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "#!/usr/bin/python3.7\n# coding=utf-8\n\nimport configparser\nimport codecs\nimport os\n\n# 本脚本用于多条审计策略\n# SCRIPT_USAGE = 1    # 登录日志审计策略\n# SCRIPT_USAGE = 2    # 系统事件审计策略\n# SCRIPT_USAGE = 3    # 对象访问事件审计策略\n# SCRIPT_USAGE = 4  # 特权使用事件审计策略\n# SCRIPT_USAGE = 5    # 策略更改事件审计策略\nSCRIPT_USAGE = 6    # 账户管理事件审计策略\n# SCRIPT_USAGE = 7    # 过程追踪事件审计策略\n# SCRIPT_USAGE = 8    # 目录服务事件审计策略\n# SCRIPT_USAGE = 9    # 账户登录事件审计策略\n\nINVALID = '-1'\n\n\nclass Config:\n    def __init__(self, path):\n        self.path = path\n        self.cf = configparser.ConfigParser()\n        self.cf.read_file(codecs.open(self.path, \"r\", \"utf_16\"))\n        s = self.cf.sections()\n\n    def get(self, field, key):\n        try:\n            result = str(self.cf.get(field, key))\n        except:\n            return INVALID\n        return result\n\n    def set(self, field, key, value):\n        self.cf.set(field, key, value)\n        self.cf.write(open(self.path, 'w'))\n        return True\n\n\ndef process(info):\n    output = os.system(\"secedit /export /cfg Password.ini\")\n\n    cf = Config(\"Password.ini\")\n\n    info[\"Audit AuditLogonEvents\"] = cf.get(\"Event Audit\", \"AuditLogonEvents\")\n    info[\"Audit AuditSystemEvents\"] = cf.get(\"Event Audit\", \"AuditSystemEvents\")\n    info[\"Audit AuditObjectAccess\"] = cf.get(\"Event Audit\", \"AuditObjectAccess\")\n    info[\"Audit AuditPrivilegeUse\"] = cf.get(\"Event Audit\", \"AuditPrivilegeUse\")\n    info[\"Audit AuditPolicyChange\"] = cf.get(\"Event Audit\", \"AuditPolicyChange\")\n    info[\"Audit AuditAccountManage\"] = cf.get(\"Event Audit\", \"AuditAccountManage\")\n    info[\"Audit AuditProcessTracking\"] = cf.get(\"Event Audit\", \"AuditProcessTracking\")\n    info[\"Audit AuditDSAccess\"] = cf.get(\"Event Audit\", \"AuditDSAccess\")\n    info[\"Audit AuditAccountLogon\"] = cf.get(\"Event Audit\", \"AuditAccountLogon\")\n\n    os.remove('Password.ini')\n\n    return\n\n\ndef check_audit(audit_key, audit_type):\n    info = result['info']\n    value = info['Audit ' + audit_key]\n    if int(value) == 3:\n        result['risk_level'] = 0\n        result['risk_desc'] = f'{audit_type}审计策略配置正确'\n        result['solution'] = '无'\n    elif int(value) == 0:\n        result['risk_level'] = 2\n        result['risk_desc'] = f'系统没有配置{audit_type}审计策略，存在较严重的审计缺陷'\n        result['solution'] = f'设置{audit_key}的审计策略为：成功事件+失败事件。'\n    elif int(value) == 1:\n        result['risk_level'] = 1\n        result['risk_desc'] = f'系统只配置了{audit_type}的成功事件审计'\n        result['solution'] = f'设置{audit_key}的审计策略为：成功事件+失败事件。'\n    elif int(value) == 2:\n        result['risk_level'] = 1\n        result['risk_desc'] = f'系统只配置了{audit_type}的失败事件审计'\n        result['solution'] = f'设置{audit_key}的审计策略为：成功事件+失败事件。'\n\n\n# 检查审计策略的设定值：\n# 0：不审计\n# 1：审计成功事件\n# 2：审计失败事件\n# 3：审计成功、失败事件\ndef analyze(result):\n    info = result['info']\n    result['risk_level'] = 0\n    result['risk_desc'] = '审计策略配置正确'\n    result['solution'] = '无'\n\n    # 登录日志审计策略\n    if SCRIPT_USAGE == 1:\n        check_audit('AuditLogonEvents', '登录')\n\n    # 系统事件审计策略\n    if SCRIPT_USAGE == 2:\n        check_audit('AuditSystemEvents', '系统')\n\n    # 对象访问事件审计策略\n    if SCRIPT_USAGE == 3:\n        check_audit('AuditObjectAccess', '对象访问')\n\n    # 特权使用事件审计策略\n    if SCRIPT_USAGE == 4:\n        check_audit('AuditPrivilegeUse', '特权使用')\n\n    # 策略更改事件审计策略\n    if SCRIPT_USAGE == 5:\n        check_audit('AuditPolicyChange', '策略更改')\n\n    # 账户管理事件审计策略\n    if SCRIPT_USAGE == 6:\n        check_audit('AuditAccountManage', '账户管理')\n\n    # 过程追踪事件审计策略\n    if SCRIPT_USAGE == 7:\n        check_audit('AuditProcessTracking', '过程追踪')\n\n    # 目录服务事件审计策略\n    if SCRIPT_USAGE == 8:\n        check_audit('AuditDSAccess', '目录服务')\n\n    # 账户登录事件审计策略\n    if SCRIPT_USAGE == 9:\n        check_audit('AuditAccountLogon', '账户登录')\n\n\n    return\n\n\nif __name__ == '__main__':\n    info = {}\n    process(info)\n\n    result = {'info': info}\n    analyze(result)\n\n    print(result)\n",
											"description": "windows/audit_policy.py, SCRIPT_USAGE = 6",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "C.7.7 Win过程追踪事件审核",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Windows过程追踪事件审核",
											"type": "text"
										},
										{
											"key": "code",
											"value": "WindowsProcessTrackAudit",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "88b73bae-1d44-4c1b-914b-16a25c801c4e",
											"description": "分组：Windows日志审计配置",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "#!/usr/bin/python3.7\n# coding=utf-8\n\nimport configparser\nimport codecs\nimport os\n\n# 本脚本用于多条审计策略\n# SCRIPT_USAGE = 1    # 登录日志审计策略\n# SCRIPT_USAGE = 2    # 系统事件审计策略\n# SCRIPT_USAGE = 3    # 对象访问事件审计策略\n# SCRIPT_USAGE = 4  # 特权使用事件审计策略\n# SCRIPT_USAGE = 5    # 策略更改事件审计策略\n# SCRIPT_USAGE = 6    # 账户管理事件审计策略\nSCRIPT_USAGE = 7    # 过程追踪事件审计策略\n# SCRIPT_USAGE = 8    # 目录服务事件审计策略\n# SCRIPT_USAGE = 9    # 账户登录事件审计策略\n\nINVALID = '-1'\n\n\nclass Config:\n    def __init__(self, path):\n        self.path = path\n        self.cf = configparser.ConfigParser()\n        self.cf.read_file(codecs.open(self.path, \"r\", \"utf_16\"))\n        s = self.cf.sections()\n\n    def get(self, field, key):\n        try:\n            result = str(self.cf.get(field, key))\n        except:\n            return INVALID\n        return result\n\n    def set(self, field, key, value):\n        self.cf.set(field, key, value)\n        self.cf.write(open(self.path, 'w'))\n        return True\n\n\ndef process(info):\n    output = os.system(\"secedit /export /cfg Password.ini\")\n\n    cf = Config(\"Password.ini\")\n\n    info[\"Audit AuditLogonEvents\"] = cf.get(\"Event Audit\", \"AuditLogonEvents\")\n    info[\"Audit AuditSystemEvents\"] = cf.get(\"Event Audit\", \"AuditSystemEvents\")\n    info[\"Audit AuditObjectAccess\"] = cf.get(\"Event Audit\", \"AuditObjectAccess\")\n    info[\"Audit AuditPrivilegeUse\"] = cf.get(\"Event Audit\", \"AuditPrivilegeUse\")\n    info[\"Audit AuditPolicyChange\"] = cf.get(\"Event Audit\", \"AuditPolicyChange\")\n    info[\"Audit AuditAccountManage\"] = cf.get(\"Event Audit\", \"AuditAccountManage\")\n    info[\"Audit AuditProcessTracking\"] = cf.get(\"Event Audit\", \"AuditProcessTracking\")\n    info[\"Audit AuditDSAccess\"] = cf.get(\"Event Audit\", \"AuditDSAccess\")\n    info[\"Audit AuditAccountLogon\"] = cf.get(\"Event Audit\", \"AuditAccountLogon\")\n\n    os.remove('Password.ini')\n\n    return\n\n\ndef check_audit(audit_key, audit_type):\n    info = result['info']\n    value = info['Audit ' + audit_key]\n    if int(value) == 3:\n        result['risk_level'] = 0\n        result['risk_desc'] = f'{audit_type}审计策略配置正确'\n        result['solution'] = '无'\n    elif int(value) == 0:\n        result['risk_level'] = 2\n        result['risk_desc'] = f'系统没有配置{audit_type}审计策略，存在较严重的审计缺陷'\n        result['solution'] = f'设置{audit_key}的审计策略为：成功事件+失败事件。'\n    elif int(value) == 1:\n        result['risk_level'] = 1\n        result['risk_desc'] = f'系统只配置了{audit_type}的成功事件审计'\n        result['solution'] = f'设置{audit_key}的审计策略为：成功事件+失败事件。'\n    elif int(value) == 2:\n        result['risk_level'] = 1\n        result['risk_desc'] = f'系统只配置了{audit_type}的失败事件审计'\n        result['solution'] = f'设置{audit_key}的审计策略为：成功事件+失败事件。'\n\n    if result['risk_level'] != 0:\n        result['solution'] += '审计安全设置的位置是：Computer Configuration\\Windows Settings\\Security Settings\\Local ' \\\n                              'Policies\\Audit Policy '\n\n\n# 检查审计策略的设定值：\n# 0：不审计\n# 1：审计成功事件\n# 2：审计失败事件\n# 3：审计成功、失败事件\ndef analyze(result):\n    info = result['info']\n    result['risk_level'] = 0\n    result['risk_desc'] = '审计策略配置正确'\n    result['solution'] = '无'\n\n    # 登录日志审计策略\n    if SCRIPT_USAGE == 1:\n        check_audit('AuditLogonEvents', '登录')\n\n    # 系统事件审计策略\n    if SCRIPT_USAGE == 2:\n        check_audit('AuditSystemEvents', '系统')\n\n    # 对象访问事件审计策略\n    if SCRIPT_USAGE == 3:\n        check_audit('AuditObjectAccess', '对象访问')\n\n    # 特权使用事件审计策略\n    if SCRIPT_USAGE == 4:\n        check_audit('AuditPrivilegeUse', '特权使用')\n\n    # 策略更改事件审计策略\n    if SCRIPT_USAGE == 5:\n        check_audit('AuditPolicyChange', '策略更改')\n\n    # 账户管理事件审计策略\n    if SCRIPT_USAGE == 6:\n        check_audit('AuditAccountManage', '账户管理')\n\n    # 过程追踪事件审计策略\n    if SCRIPT_USAGE == 7:\n        check_audit('AuditProcessTracking', '过程追踪')\n\n    # 目录服务事件审计策略\n    if SCRIPT_USAGE == 8:\n        check_audit('AuditDSAccess', '目录服务')\n\n    # 账户登录事件审计策略\n    if SCRIPT_USAGE == 9:\n        check_audit('AuditAccountLogon', '账户登录')\n\n\n    return\n\n\nif __name__ == '__main__':\n    info = {}\n    process(info)\n\n    result = {'info': info}\n    analyze(result)\n\n    print(result)\n",
											"description": "windows/audit_policy.py, SCRIPT_USAGE = 7",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "C.7.8 Win目录服务事件审核",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Windows目录服务事件审核",
											"type": "text"
										},
										{
											"key": "code",
											"value": "WindowsDSAccessAudit",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "88b73bae-1d44-4c1b-914b-16a25c801c4e",
											"description": "分组：Windows日志审计配置",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "#!/usr/bin/python3.7\n# coding=utf-8\n\nimport configparser\nimport codecs\nimport os\n\n# 本脚本用于多条审计策略\n# SCRIPT_USAGE = 1    # 登录日志审计策略\n# SCRIPT_USAGE = 2    # 系统事件审计策略\n# SCRIPT_USAGE = 3    # 对象访问事件审计策略\n# SCRIPT_USAGE = 4  # 特权使用事件审计策略\n# SCRIPT_USAGE = 5    # 策略更改事件审计策略\n# SCRIPT_USAGE = 6    # 账户管理事件审计策略\n# SCRIPT_USAGE = 7    # 过程追踪事件审计策略\nSCRIPT_USAGE = 8    # 目录服务事件审计策略\n# SCRIPT_USAGE = 9    # 账户登录事件审计策略\n\nINVALID = '-1'\n\n\nclass Config:\n    def __init__(self, path):\n        self.path = path\n        self.cf = configparser.ConfigParser()\n        self.cf.read_file(codecs.open(self.path, \"r\", \"utf_16\"))\n        s = self.cf.sections()\n\n    def get(self, field, key):\n        try:\n            result = str(self.cf.get(field, key))\n        except:\n            return INVALID\n        return result\n\n    def set(self, field, key, value):\n        self.cf.set(field, key, value)\n        self.cf.write(open(self.path, 'w'))\n        return True\n\n\ndef process(info):\n    output = os.system(\"secedit /export /cfg Password.ini\")\n\n    cf = Config(\"Password.ini\")\n\n    info[\"Audit AuditLogonEvents\"] = cf.get(\"Event Audit\", \"AuditLogonEvents\")\n    info[\"Audit AuditSystemEvents\"] = cf.get(\"Event Audit\", \"AuditSystemEvents\")\n    info[\"Audit AuditObjectAccess\"] = cf.get(\"Event Audit\", \"AuditObjectAccess\")\n    info[\"Audit AuditPrivilegeUse\"] = cf.get(\"Event Audit\", \"AuditPrivilegeUse\")\n    info[\"Audit AuditPolicyChange\"] = cf.get(\"Event Audit\", \"AuditPolicyChange\")\n    info[\"Audit AuditAccountManage\"] = cf.get(\"Event Audit\", \"AuditAccountManage\")\n    info[\"Audit AuditProcessTracking\"] = cf.get(\"Event Audit\", \"AuditProcessTracking\")\n    info[\"Audit AuditDSAccess\"] = cf.get(\"Event Audit\", \"AuditDSAccess\")\n    info[\"Audit AuditAccountLogon\"] = cf.get(\"Event Audit\", \"AuditAccountLogon\")\n\n    os.remove('Password.ini')\n\n    return\n\n\ndef check_audit(audit_key, audit_type):\n    info = result['info']\n    value = info['Audit ' + audit_key]\n    if int(value) == 3:\n        result['risk_level'] = 0\n        result['risk_desc'] = f'{audit_type}审计策略配置正确'\n        result['solution'] = '无'\n    elif int(value) == 0:\n        result['risk_level'] = 2\n        result['risk_desc'] = f'系统没有配置{audit_type}审计策略，存在较严重的审计缺陷'\n        result['solution'] = f'设置{audit_key}的审计策略为：成功事件+失败事件。'\n    elif int(value) == 1:\n        result['risk_level'] = 1\n        result['risk_desc'] = f'系统只配置了{audit_type}的成功事件审计'\n        result['solution'] = f'设置{audit_key}的审计策略为：成功事件+失败事件。'\n    elif int(value) == 2:\n        result['risk_level'] = 1\n        result['risk_desc'] = f'系统只配置了{audit_type}的失败事件审计'\n        result['solution'] = f'设置{audit_key}的审计策略为：成功事件+失败事件。'\n\n    if result['risk_level'] != 0:\n        result['solution'] += '审计安全设置的位置是：Computer Configuration\\Windows Settings\\Security Settings\\Local ' \\\n                              'Policies\\Audit Policy '\n\n\n# 检查审计策略的设定值：\n# 0：不审计\n# 1：审计成功事件\n# 2：审计失败事件\n# 3：审计成功、失败事件\ndef analyze(result):\n    info = result['info']\n    result['risk_level'] = 0\n    result['risk_desc'] = '审计策略配置正确'\n    result['solution'] = '无'\n\n    # 登录日志审计策略\n    if SCRIPT_USAGE == 1:\n        check_audit('AuditLogonEvents', '登录')\n\n    # 系统事件审计策略\n    if SCRIPT_USAGE == 2:\n        check_audit('AuditSystemEvents', '系统')\n\n    # 对象访问事件审计策略\n    if SCRIPT_USAGE == 3:\n        check_audit('AuditObjectAccess', '对象访问')\n\n    # 特权使用事件审计策略\n    if SCRIPT_USAGE == 4:\n        check_audit('AuditPrivilegeUse', '特权使用')\n\n    # 策略更改事件审计策略\n    if SCRIPT_USAGE == 5:\n        check_audit('AuditPolicyChange', '策略更改')\n\n    # 账户管理事件审计策略\n    if SCRIPT_USAGE == 6:\n        check_audit('AuditAccountManage', '账户管理')\n\n    # 过程追踪事件审计策略\n    if SCRIPT_USAGE == 7:\n        check_audit('AuditProcessTracking', '过程追踪')\n\n    # 目录服务事件审计策略\n    if SCRIPT_USAGE == 8:\n        check_audit('AuditDSAccess', '目录服务')\n\n    # 账户登录事件审计策略\n    if SCRIPT_USAGE == 9:\n        check_audit('AuditAccountLogon', '账户登录')\n\n\n    return\n\n\nif __name__ == '__main__':\n    info = {}\n    process(info)\n\n    result = {'info': info}\n    analyze(result)\n\n    print(result)\n",
											"description": "windows/audit_policy.py, SCRIPT_USAGE = 8",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "C.7.9 Win账户登录事件审核",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Windows账户登录事件审核",
											"type": "text"
										},
										{
											"key": "code",
											"value": "WindowsAccountLogonAudit",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "88b73bae-1d44-4c1b-914b-16a25c801c4e",
											"description": "分组：Windows日志审计配置",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "#!/usr/bin/python3.7\n# coding=utf-8\n\nimport configparser\nimport codecs\nimport os\n\n# 本脚本用于多条审计策略\n# SCRIPT_USAGE = 1    # 登录日志审计策略\n# SCRIPT_USAGE = 2    # 系统事件审计策略\n# SCRIPT_USAGE = 3    # 对象访问事件审计策略\n# SCRIPT_USAGE = 4  # 特权使用事件审计策略\n# SCRIPT_USAGE = 5    # 策略更改事件审计策略\n# SCRIPT_USAGE = 6    # 账户管理事件审计策略\n# SCRIPT_USAGE = 7    # 过程追踪事件审计策略\n# SCRIPT_USAGE = 8    # 目录服务事件审计策略\nSCRIPT_USAGE = 9    # 账户登录事件审计策略\n\nINVALID = '-1'\n\n\nclass Config:\n    def __init__(self, path):\n        self.path = path\n        self.cf = configparser.ConfigParser()\n        self.cf.read_file(codecs.open(self.path, \"r\", \"utf_16\"))\n        s = self.cf.sections()\n\n    def get(self, field, key):\n        try:\n            result = str(self.cf.get(field, key))\n        except:\n            return INVALID\n        return result\n\n    def set(self, field, key, value):\n        self.cf.set(field, key, value)\n        self.cf.write(open(self.path, 'w'))\n        return True\n\n\ndef process(info):\n    output = os.system(\"secedit /export /cfg Password.ini\")\n\n    cf = Config(\"Password.ini\")\n\n    info[\"Audit AuditLogonEvents\"] = cf.get(\"Event Audit\", \"AuditLogonEvents\")\n    info[\"Audit AuditSystemEvents\"] = cf.get(\"Event Audit\", \"AuditSystemEvents\")\n    info[\"Audit AuditObjectAccess\"] = cf.get(\"Event Audit\", \"AuditObjectAccess\")\n    info[\"Audit AuditPrivilegeUse\"] = cf.get(\"Event Audit\", \"AuditPrivilegeUse\")\n    info[\"Audit AuditPolicyChange\"] = cf.get(\"Event Audit\", \"AuditPolicyChange\")\n    info[\"Audit AuditAccountManage\"] = cf.get(\"Event Audit\", \"AuditAccountManage\")\n    info[\"Audit AuditProcessTracking\"] = cf.get(\"Event Audit\", \"AuditProcessTracking\")\n    info[\"Audit AuditDSAccess\"] = cf.get(\"Event Audit\", \"AuditDSAccess\")\n    info[\"Audit AuditAccountLogon\"] = cf.get(\"Event Audit\", \"AuditAccountLogon\")\n\n    os.remove('Password.ini')\n\n    return\n\n\ndef check_audit(audit_key, audit_type):\n    info = result['info']\n    value = info['Audit ' + audit_key]\n    if int(value) == 3:\n        result['risk_level'] = 0\n        result['risk_desc'] = f'{audit_type}审计策略配置正确'\n        result['solution'] = '无'\n    elif int(value) == 0:\n        result['risk_level'] = 2\n        result['risk_desc'] = f'系统没有配置{audit_type}审计策略，存在较严重的审计缺陷'\n        result['solution'] = f'设置{audit_key}的审计策略为：成功事件+失败事件。'\n    elif int(value) == 1:\n        result['risk_level'] = 1\n        result['risk_desc'] = f'系统只配置了{audit_type}的成功事件审计'\n        result['solution'] = f'设置{audit_key}的审计策略为：成功事件+失败事件。'\n    elif int(value) == 2:\n        result['risk_level'] = 1\n        result['risk_desc'] = f'系统只配置了{audit_type}的失败事件审计'\n        result['solution'] = f'设置{audit_key}的审计策略为：成功事件+失败事件。'\n\n    if result['risk_level'] != 0:\n        result['solution'] += '审计安全设置的位置是：Computer Configuration\\Windows Settings\\Security Settings\\Local ' \\\n                              'Policies\\Audit Policy '\n\n\n# 检查审计策略的设定值：\n# 0：不审计\n# 1：审计成功事件\n# 2：审计失败事件\n# 3：审计成功、失败事件\ndef analyze(result):\n    info = result['info']\n    result['risk_level'] = 0\n    result['risk_desc'] = '审计策略配置正确'\n    result['solution'] = '无'\n\n    # 登录日志审计策略\n    if SCRIPT_USAGE == 1:\n        check_audit('AuditLogonEvents', '登录')\n\n    # 系统事件审计策略\n    if SCRIPT_USAGE == 2:\n        check_audit('AuditSystemEvents', '系统')\n\n    # 对象访问事件审计策略\n    if SCRIPT_USAGE == 3:\n        check_audit('AuditObjectAccess', '对象访问')\n\n    # 特权使用事件审计策略\n    if SCRIPT_USAGE == 4:\n        check_audit('AuditPrivilegeUse', '特权使用')\n\n    # 策略更改事件审计策略\n    if SCRIPT_USAGE == 5:\n        check_audit('AuditPolicyChange', '策略更改')\n\n    # 账户管理事件审计策略\n    if SCRIPT_USAGE == 6:\n        check_audit('AuditAccountManage', '账户管理')\n\n    # 过程追踪事件审计策略\n    if SCRIPT_USAGE == 7:\n        check_audit('AuditProcessTracking', '过程追踪')\n\n    # 目录服务事件审计策略\n    if SCRIPT_USAGE == 8:\n        check_audit('AuditDSAccess', '目录服务')\n\n    # 账户登录事件审计策略\n    if SCRIPT_USAGE == 9:\n        check_audit('AuditAccountLogon', '账户登录')\n\n\n    return\n\n\nif __name__ == '__main__':\n    info = {}\n    process(info)\n\n    result = {'info': info}\n    analyze(result)\n\n    print(result)\n",
											"description": "windows/audit_policy.py, SCRIPT_USAGE = 9",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "C.8 Win文件安全防护",
					"item": [
						{
							"name": "C.8.1 Win系统文件隐藏缺陷",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Windows系统文件隐藏缺陷",
											"type": "text"
										},
										{
											"key": "code",
											"value": "WindowsFileHideDefect",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "fd4068f1-6100-4711-bb65-c716c982ea8f",
											"description": "分组：Windows系统文件安全防护",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "#!/usr/bin/python3.7\n# coding=utf-8\nimport os\nimport winreg\n\n\ndef getRegValue(key, value_name):\n    try:\n        value, type = winreg.QueryValueEx(key, value_name)\n    except WindowsError:\n        value = -1\n        type = -1\n\n    return value, type\n\n\ndef process(result):\n    info = {}\n    result['info'] = info\n\n    # 打开注册表 HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\Folder\\Hidden\\SHOWALL\n    key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced'\n                                                    r'\\Folder\\Hidden\\SHOWALL')\n\n    # 读取系统隐藏文件的可读性\n    value, type = getRegValue(key, 'CheckedValue')\n    # 键值类型4：REG_DWORD\n    if type != 4 or value != 1:\n        info['Hide File Defect'] = 1\n        result['risk_level'] = 3\n        result['risk_desc'] = '木马修改了注册表，以保护自己，需修复注册表。'\n        result['solution'] = '在注册表 HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced' \\\n                             '\\Folder\\Hidden\\SHOWALL下，将CheckedValue删除，再新建一个DWORD值命名为CheckedValue，数值取1即可。 '\n    else:\n        info['Hide File Defect'] = 0\n        result['risk_level'] = 0\n        result['risk_desc'] = '未发现隐藏文件漏洞。'\n        result['solution'] = '无'\n\n    return\n\n\nif __name__ == '__main__':\n    _result = {}\n    process(_result)\n\n    print(_result)\n",
											"description": "windows/file_hide_defect.py",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "C.8.2 Win文件系统检查",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Windows磁盘文件系统",
											"type": "text"
										},
										{
											"key": "code",
											"value": "WindowsDiskFileSystem",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "fd4068f1-6100-4711-bb65-c716c982ea8f",
											"description": "分组：Windows系统文件安全防护",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "#!/usr/bin/python3.7\n# coding=utf-8\nimport psutil\n# from json import JSONEncoder\nimport json\n\n\ndef process(result):\n    info = {}\n    result['info'] = info\n\n    # 获取所有磁盘的分区信息\n    disk_part = psutil.disk_partitions()\n\n    # 系统磁盘的分区信息\n    sys_disk_part = disk_part[0]._asdict()\n    # info['System Disk Partition'] = JSONEncoder().encode(sys_disk_part)\n    info['System Disk Partition'] = json.dumps(sys_disk_part)\n    # sys_disk_part_dict = sys_disk_part._asdict()\n    if sys_disk_part['device'] != 'C:\\\\':\n        result['risk_level'] = 3\n        result['risk_desc'] = '未成功获取磁盘分区信息。'\n        result['solution'] = '请检查磁盘分区信息，确保系统盘的正确分区。'\n    elif sys_disk_part['fstype'] != 'NTFS':\n        result['risk_level'] = 2\n        result['risk_desc'] = '系统盘没有采用NTFS文件系统，不支持文件安全设置。'\n        result['solution'] = '为保证文件系统的安全性，建议将磁盘改成NTFS文件系统，并重新安装操作系统。'\n    else:\n        result['risk_level'] = 0\n        result['risk_desc'] = '系统盘采用了NTFS文件系统，支持文件安全设置。'\n        result['solution'] = '无。'\n\n    return\n\n\nif __name__ == '__main__':\n    _result = {}\n    process(_result)\n\n    print(_result)\n",
											"description": "windows/file_system.py",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "C.9 Linux用户账号配置",
					"item": [
						{
							"name": "C.9.1 Linux多余账号",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Linux多余账号",
											"type": "text"
										},
										{
											"key": "code",
											"value": "LinuxRedundantAccounts",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "d56bb9e2-7b9d-45fc-a67f-72dc7898ffa9",
											"description": "分组：Linux用户账号配置",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "2",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "2",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "import os\nimport platform\nimport json\n\n\ndef get_os_info():\n    os_info = platform.uname()._asdict()\n    return os_info\n\n\ndef process(result):\n    info = {}\n    result['info'] = info\n\n    os_info = get_os_info()\n    # os_json = json.dumps(os_info)\n    # print(os_info)\n    # print(os_json)\n\n    # 获取所有用户\n    os.system(\"cat /etc/passwd > passwd.txt\")\n    all_users = open(\"passwd.txt\", \"r\").readlines()\n\n    # 获取所有有效用户 (每行结尾不是 nologin)\n    os.system(\"grep -v nologin$ /etc/passwd > passwd.txt\")\n    active_users = open(\"passwd.txt\", \"r\").readlines()\n\n    all_users_count = len(all_users)\n    active_users_count = len(active_users)\n    info['Active Users'] = active_users\n\n    # 活跃用户大于5时，需检查确认是否有多余账户\n    if active_users_count > 5:\n        result['risk_level'] = 1\n        result['risk_desc'] = '系统账户过多，共计{}个账户，其中{}个活跃账户。'.format(all_users_count, active_users_count)\n        result['solution'] = '请联系系统管理员，使用超级用户登录系统，锁定与设备或系统运行、维护等工作无关的帐号\\npasswd -l <username>'\n    else:\n        result['risk_level'] = 0\n        result['risk_desc'] = '系统用户数量处于正常状态。'\n        result['solution'] = '无'\n\n    os.remove(\"passwd.txt\")\n    return os_info\n\n\nif __name__ == '__main__':\n    _result = {}\n    process(_result)\n\n    print(_result)\n",
											"description": "linux/unused_user.py",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "C.9.2 Linux root远程登录限制",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Linux root远程登录限制",
											"type": "text"
										},
										{
											"key": "code",
											"value": "LinuxRootRemoteLogin",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "d56bb9e2-7b9d-45fc-a67f-72dc7898ffa9",
											"description": "分组：Linux用户账号配置",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "2",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "2",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "#!/usr/bin/python3\n# coding=utf-8\nimport os\nimport platform\nimport json\n\n\ndef get_os_info():\n    os_info = platform.uname()._asdict()\n    return os_info\n\n\ndef process(result):\n    info = {}\n    result['info'] = info\n\n    os_info = get_os_info()\n\n    # 获取root账户SSH远程登录限制的配置\n    os.system(\"grep '^PermitRootLogin' /etc/ssh/sshd_config > root.txt\")\n    permit = open(\"root.txt\", \"r\").readlines()\n\n    # 如果读取不到 PermitRootLogin 开头的行，说明配置文件中这行被注释了\n    # 按照 PermitRootLogin yes 做错误处理\n    if len(permit) == 0:\n        info['PermitRootLogin'] = \"Not configured\"\n        split_permit = [\"PermitRootLogin\", \"yes\"]\n    else:\n        info['PermitRootLogin'] = permit[0]\n        # 分割\n        split_permit = permit[0].split()\n\n    # 判断是否允许root远程登录\n    if split_permit[1] == \"yes\":\n        result['risk_level'] = 2\n        result['risk_desc'] = '系统未限制root账户远程登录。'\n        result['solution'] = '修改/etc/ssh/sshd_config文件，将PermitRootLogin yes改为PermitRootLogin no，重启sshd服务。'\n    else:\n        result['risk_level'] = 0\n        result['risk_desc'] = '系统已限制root账户远程登录。'\n        result['solution'] = '无'\n\n    os.remove(\"root.txt\")\n\n\nif __name__ == '__main__':\n    _result = {}\n    process(_result)\n\n    print(_result)\n",
											"description": "linux/root_remote_login.py",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "C10. Linux口令配置",
					"item": [
						{
							"name": "C.10.1 Linux口令要求",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Linux口令要求",
											"type": "text"
										},
										{
											"key": "code",
											"value": "LinuxPwdRequisite",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "4c025006-3742-4cc4-8923-3b67055350fc",
											"description": "分组：Linux口令配置",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "2",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "2",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "import os\nimport platform\nimport json\nimport re\n\n\ndef get_os_info():\n    os_info = platform.uname()._asdict()\n    return os_info\n\n\ndef process(result):\n    info = {}\n    result['info'] = info\n\n    os_info = get_os_info()\n\n    # 获取密码要求的配置\n    os.system(\"grep '^password\\t*requisite' /etc/pam.d/common-password > passwd_req.txt\")\n    passwd_req = open(\"passwd_req.txt\", \"r\").readlines()\n\n    # password requisite pam_deny.so minlen=6\n    # 参数说明如下：\n    # 1、retry=N，确定用户创建密码时允许重试的次数；\n    # 2、minlen=N，确定密码最小长度要求，事实上，在默认配置下，此参数代表密码最小长度为N-1；\n    # 3、dcredit=N，当N小于0时，代表新密码中数字字符数量不得少于（-N）个。例如，dcredit=-2代表密码中要至少包含两个数字字符；\n    # 4、ucredit=N，当N小于0时，代表则新密码中大写字符数量不得少于（-N）个；\n    # 5、lcredit=N，当N小于0时，代表则新密码中小写字符数量不得少于（-N）个；\n    # 6、ocredit=N，当N小于0时，代表则新密码中特殊字符数量不得少于（-N）个；\n    if len(passwd_req) == 0:\n        # 如果读取不到 password requisite 参数，按没有密码要求处理\n        info['Password requisite'] = \"没有找到口令要求的配置。\"\n        result['risk_level'] = 2\n        result['risk_desc'] = '系统没有对用户口令做任何限制要求，用户口令可能过于简单，对系统造成威胁。'\n        result['solution'] = '修改/etc/pam.d/common-password文件，设置password requisite minlen = 12。'\n    else:\n        # passwd_req = 'password    requisite     minlen = 8'\n        passwd_req = passwd_req[0]\n        info['Password requisite'] = passwd_req\n        pos = passwd_req.find('minlen')\n        if pos < 0:\n            result['risk_level'] = 1\n            result['risk_desc'] = '未设置口令最小长度，系统安全要求最少12位。'\n            result['solution'] = 'vi /etc/pam.d/common-password，找到password模块接口的配置部分，设置password requisite minlen = 12。'\n        else:\n            min_len = passwd_req[pos:].strip().replace(' ', '')\n            min_len = int(min_len[7:])\n            if min_len < 12:\n                result['risk_level'] = 1\n                result['risk_desc'] = '当前口令最小长度设置为{}位，系统安全要求最少12位。'.format(min_len)\n                result['solution'] = 'vi /etc/pam.d/common-password，找到password模块接口的配置部分，设置password requisite minlen = ' \\\n                                     '12。 '\n            else:\n                result['risk_level'] = 0\n                result['risk_desc'] = '用户口令设置符合要求。'\n                result['solution'] = '无'\n\n    os.remove(\"passwd_req.txt\")\n    return os_info\n\n\nif __name__ == '__main__':\n    _result = {}\n    process(_result)\n\n    print(_result)\n",
											"description": "linux/passwd_requisite.py",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "C.10.2 Linux口令最长生存期",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Linux口令最长生存期",
											"type": "text"
										},
										{
											"key": "code",
											"value": "LinuxPassMaxDays",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "4c025006-3742-4cc4-8923-3b67055350fc",
											"description": "分组：Linux口令配置",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "2",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "2",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "import os\nimport platform\nimport json\nimport re\n\n\ndef get_os_info():\n    os_info = platform.uname()._asdict()\n    return os_info\n\n\ndef process(result):\n    info = {}\n    result['info'] = info\n\n    os_info = get_os_info()\n\n    # 获取密码要求的配置\n    os.system(\"grep '^PASS_MAX_DAYS' /etc/login.defs > pass_maxd.txt\")\n    pass_max_days_list = open(\"pass_maxd.txt\", \"r\").readlines()\n\n    # cat /etc/login.defs文件中指定配置项，其中：\n    # 要求操作系统的账户口令的最长生存期不长于90天\n    # PASS_MAX_DAYS配置项决定密码最长使用期限；\n    # PASS_MIN_DAYS配置项决定密码最短使用期限；\n    # PASS_WARN_AGE配置项决定密码到期提醒时间。\n    # vi /etc/login.defs文件，修改PASS_MAX_DAYS值为小于等于90\n    if len(pass_max_days_list) == 0:\n        # 如果读取不到 PASS_MAX_DAYS 配置，按没有该配置处理\n        info['PASS_MAX_DAYS'] = \"没有设置口令的最长使用期限。\"\n        result['risk_level'] = 2\n        result['risk_desc'] = '没有设置口令的最长使用期限。'\n        result['solution'] = '配置方法：vi /etc/login.defs文件，修改PASS_MAX_DAYS值为小于等于90。'\n    else:\n        # PASS_MAX_DAYS\t99999\n        pass_max_days = pass_max_days_list[0]\n        info['PASS_MAX_DAYS'] = pass_max_days\n        pass_max_days = re.sub(' +', ' ', pass_max_days)\n        pass_max_days = int(pass_max_days.split()[1])\n        if pass_max_days > 90:\n            result['risk_level'] = 1\n            result['risk_desc'] = '账户口令的最长生存期的当前设置为{}天,违背了不长于90天的原则。'.format(pass_max_days)\n            result['solution'] = '配置方法：vi /etc/login.defs文件，修改PASS_MAX_DAYS值为小于等于90。'\n        else:\n            result['risk_level'] = 0\n            result['risk_desc'] = '账户口令的最长生存期的当前设置为{}天，符合不长于90天的要求。'.format(pass_max_days)\n            result['solution'] = '无'\n\n    os.remove(\"pass_maxd.txt\")\n    return os_info\n\n\nif __name__ == '__main__':\n    _result = {}\n    process(_result)\n\n    print(_result)\n",
											"description": "linux/passwd_max_days.py",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "C11. Linux文件安全防护",
					"item": [
						{
							"name": "C.11.1 Linux关键文件权限控制",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Linux关键文件权限控制",
											"type": "text"
										},
										{
											"key": "code",
											"value": "LinuxCriticalFileRights",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "337cb5d7-bf22-4745-824d-38216971d148",
											"description": "分组：Linux文件安全防护",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "2",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "2",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "import os\nimport platform\nimport json\nimport re\n\n\ndef get_os_info():\n    os_info = platform.uname()._asdict()\n    return os_info\n\n\ndef process(result):\n    info = {}\n    result['info'] = info\n\n    os_info = get_os_info()\n\n    result['risk_level'] = 0\n    result['risk_desc'] = ''\n    result['solution'] = ''\n\n    # /etc/passwd 所有用户都可读，root用户可写\n    # -rw-r--r--\n    os.system(\"ls -l /etc/passwd > passwd.txt\")\n    passwd = open(\"passwd.txt\", \"r\").readlines()\n    if len(passwd) != 0:\n        info['passwd file'] = passwd[0]\n        if passwd[0][0:10] != '-rw-r--r--':\n            result['risk_level'] = 2\n            result['risk_desc'] += '/etc/passwd 的文件权限不符合\"所有用户都可读，root用户可写\"的要求。\\n'\n            result['solution'] += '配置命令：chmod 644 /etc/passwd 。\\n'\n    os.remove('passwd.txt')\n\n    # /etc/shadow 只有root可读\n    # -r--------\n    os.system(\"ls -l /etc/shadow > shadow.txt\")\n    shadow = open(\"shadow.txt\", \"r\").readlines()\n    if len(shadow) != 0:\n        info['shadow file'] = shadow[0]\n        if shadow[0][0:10] != '-r--------':\n            result['risk_level'] = 2\n            result['risk_desc'] += '/etc/shadow 的文件权限不符合\"只有root可读\"的要求。\\n'\n            result['solution'] += '配置命令：chmod 600 /etc/shadow 。\\n'\n    os.remove('shadow.txt')\n\n    # /etc/group 必须所有用户都可读，root用户可写\n    # -rw-r--r--\n    os.system(\"ls -l /etc/group > group.txt\")\n    group = open(\"group.txt\", \"r\").readlines()\n    if len(group) != 0:\n        info['group file'] = group[0]\n        if group[0][0:10] != '-rw-r--r--':\n            result['risk_level'] = 2\n            result['risk_desc'] += '/etc/group 的文件权限不符合\"所有用户都可读，root用户可写\"的要求。\\n'\n            result['solution'] += '配置命令：chmod 644 /etc/group 。\\n'\n    os.remove('group.txt')\n\n    if result['risk_level'] == 0:\n        result['risk_desc'] = '关键目录权限符合要求。'\n        result['solution'] = '无'\n\n\nif __name__ == '__main__':\n    _result = {}\n    process(_result)\n\n    print(_result)\n",
											"description": "linux/critical_files_right.py",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "C12. Linux日志审计",
					"item": [
						{
							"name": "C.12.1 Linux安全日志完备性",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Linux安全日志完备性",
											"type": "text"
										},
										{
											"key": "code",
											"value": "LinuxSecureLogConfig",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "b344bfbe-0c1b-46a3-b995-e2d0a6773fa6",
											"description": "分组：Linux日志审计",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "2",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "2",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "import os\nimport platform\nimport json\nimport re\n\n\ndef get_os_info():\n    os_info = platform.uname()._asdict()\n    return os_info\n\n\ndef process(result):\n    info = {}\n    result['info'] = info\n\n    os_info = get_os_info()\n\n    # 安全日志完备性要求\n    # 系统应配置完备日志记录，记录对与系统相关的安全事件。\n    os.system(\"grep authpriv.* /etc/rsyslog.conf > rsyslog.txt\")\n    rsyslog = open(\"rsyslog.txt\", \"r\").readlines()\n    if len(rsyslog) == 0:\n        info['rsyslog authpriv'] = '没有相应的日志配置'\n        result['risk_level'] = 2\n        result['risk_desc'] = '系统应配置完备日志记录，记录对与系统相关的安全事件。'\n        result['solution'] = '修改配置文件vi /etc/rsyslog.conf，配置如下类似语句：\\nauthpriv.*            /var/log/auth.log'\n    else:\n        info['rsyslog authpriv'] = rsyslog\n        result['risk_level'] = 0\n        result['risk_desc'] = '系统已配置完备日志记录'\n        result['solution'] = '无'\n\n    os.remove('rsyslog.txt')\n\n\nif __name__ == '__main__':\n    _result = {}\n    process(_result)\n\n    print(_result)\n",
											"description": "linux/secure_log.py",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "C.12.2 Linux历史时间戳",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Linux历史时间戳",
											"type": "text"
										},
										{
											"key": "code",
											"value": "LinuxHistoryTimestamp",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "b344bfbe-0c1b-46a3-b995-e2d0a6773fa6",
											"description": "分组：Linux日志审计",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "2",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "2",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "import os\nimport platform\nimport json\nimport re\n\n\ndef get_os_info():\n    os_info = platform.uname()._asdict()\n    return os_info\n\n\ndef process(result):\n    info = {}\n    result['info'] = info\n\n    os_info = get_os_info()\n\n    # 设置history时间戳，便于审计。\n    # 系统应配置完备日志记录，记录对与系统相关的安全事件。\n    os.system(\"grep HISTTIMEFORMAT /etc/profile > history.txt\")\n    history = open(\"history.txt\", \"r\").readlines()\n    if len(history) == 0:\n        info['History timestamp'] = '没有配置 history 时间戳。'\n        result['risk_level'] = 1\n        result['risk_desc'] = '系统应配置 history 时间戳，便于审计。'\n        result['solution'] = '在/etc/profile 文件中增加如下行：\\nexport HISTTIMEFORMAT=\"%F %T `whoami` \"'\n    else:\n        info['History timestamp'] = history[0]\n        result['risk_level'] = 0\n        result['risk_desc'] = '系统已配置 history 时间戳。'\n        result['solution'] = '无'\n\n    os.remove('history.txt')\n\n\nif __name__ == '__main__':\n    _result = {}\n    process(_result)\n\n    print(_result)\n",
											"description": "linux/history_timestamp.py",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "C13. Linux系统服务",
					"item": [
						{
							"name": "C.13.1 Linux SSH服务",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Linux SSH 服务",
											"type": "text"
										},
										{
											"key": "code",
											"value": "LinuxSSHService",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "debcd26a-dbd8-426f-8789-5be3fccef021",
											"description": "分组：Linux系统服务",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "2",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "2",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "import os\nimport platform\nimport json\nimport re\n\n\ndef get_os_info():\n    os_info = platform.uname()._asdict()\n    return os_info\n\n\ndef check_config(cfg_list, cfg, value):\n    if len(cfg_list) > 0:\n        for info in cfg_list:\n            if info.find(cfg) == 0 and info.find(value) > len(cfg):\n                return True\n    return False\n\n\ndef get_line(info_list, key):\n    if len(info_list) > 0:\n        for info in info_list:\n            if info.find(key) >= 0:\n                return info\n    return ''\n\n\ndef process(result):\n    info = {}\n    result['info'] = info\n\n    os_info = get_os_info()\n\n    result['risk_level'] = 0\n    result['risk_desc'] = ''\n    result['solution'] = ''\n\n    # SSH登录配置\n    # 系统应配置使用SSH等加密协议进行远程登录维护，并安全配置SSHD的设置。不使用TELENT进行远程登录维护。\n\n    # 检查 ssh 服务\n    os.system(\"ps -elf | grep sshd > ps.txt\")\n    ps_result = open(\"ps.txt\", \"r\").readlines()\n    line_info = get_line(ps_result, '/usr/sbin/sshd')\n    if len(line_info) == 0:\n        info['SSH Service'] = '没有启动 SSH 服务。'\n        result['risk_level'] = 2\n        result['risk_desc'] += '没有启动SSH服务。\\n'\n        result['solution'] += '命令：systemctl start sshd 启动服务\\n'\n    else:\n        info['SSH Service'] = line_info\n\n    # 检查 telnet 服务\n    os.system(\"ps -elf | grep xinetd > ps.txt\")\n    ps_result = open(\"ps.txt\", \"r\").readlines()\n    line_info = get_line(ps_result, '/etc/rc.d/init.d/xinetd')\n    if len(line_info) > 0:\n        info['Telnet Service'] = line_info\n        result['risk_level'] = 2\n        result['risk_desc'] += '系统启动了 Telnet 服务，采用这种远程维护是不安全的。\\n'\n        result['solution'] += '关闭 Telnet 服务，且将其设置成开机不自动启动。\\n'\n    else:\n        info['Telnet Service'] = '没有启动 Telnet 服务。'\n\n    os.remove('ps.txt')\n\n    # 读取 SSH 配置\n    os.system(\"cat /etc/ssh/sshd_config > sshd_config.txt\")\n    sshd_config = open(\"sshd_config.txt\", \"r\").readlines()\n    info['SSH Config'] = sshd_config\n\n    # 窗口图形传输使用ssh加密\n    if not check_config(sshd_config, 'X11Forwarding', 'yes'):\n        result['risk_level'] = 2\n        result['risk_desc'] += '未允许窗口图形传输使用 SSH 加密。\\n'\n        result['solution'] += 'sshd_config 增加配置：X11Forwarding yes。\\n'\n\n    # 完全禁止SSHD使用.rhosts文件\n    if not check_config(sshd_config, 'IgnoreRhosts', 'yes'):\n        result['risk_level'] = 2\n        result['risk_desc'] += '未禁止SSHD使用.rhosts文件。\\n'\n        result['solution'] += 'sshd_config 增加配置：IgnoreRhosts yes。\\n'\n\n    # 不设置使用基于rhosts的安全验证\n    if not check_config(sshd_config, 'RhostsAuthentication', 'no'):\n        result['risk_level'] = 2\n        result['risk_desc'] += '未禁止基于rhosts的安全验证。\\n'\n        result['solution'] += 'sshd_config 增加配置：RhostsAuthentication no。\\n'\n\n    # 不设置使用RSA算法的基于rhosts的安全验证\n    if not check_config(sshd_config, 'RhostsRSAAuthentication', 'no'):\n        result['risk_level'] = 2\n        result['risk_desc'] += '未禁止使用RSA算法的基于rhosts的安全验证。\\n'\n        result['solution'] += 'sshd_config 增加配置：RhostsRSAAuthentication no。\\n'\n\n    # 不允许基于主机白名单方式认证\n    if not check_config(sshd_config, 'HostbasedAuthentication', 'no'):\n        result['risk_level'] = 2\n        result['risk_desc'] += '未禁止基于主机白名单方式认证。\\n'\n        result['solution'] += 'sshd_config 增加配置：HostbasedAuthentication no。\\n'\n\n    # 不允许root登录\n    if not check_config(sshd_config, 'PermitRootLogin', 'no'):\n        result['risk_level'] = 2\n        result['risk_desc'] += '未禁止root登录。\\n'\n        result['solution'] += 'sshd_config 增加配置：PermitRootLogin no。\\n'\n\n    # 不允许空密码\n    if not check_config(sshd_config, 'PermitEmptyPasswords', 'no'):\n        result['risk_level'] = 2\n        result['risk_desc'] += '未禁止空密码。\\n'\n        result['solution'] += 'sshd_config 增加配置：PermitEmptyPasswords no。\\n'\n\n    # 设置ssh登录时显示的banner\n    if not check_config(sshd_config, 'Banner', '/etc/motd'):\n        result['risk_level'] = 2\n        result['risk_desc'] += '未设置ssh登录时显示的banner。\\n'\n        result['solution'] += 'sshd_config 增加配置：Banner /etc/motd。\\n'\n\n    os.remove('sshd_config.txt')\n\n\nif __name__ == '__main__':\n    _result = {}\n    process(_result)\n\n    print(_result)\n",
											"description": "linux/sshd_config.py",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "2000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "C.13.2 Linux系统服务筛查",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Linux系统服务筛查",
											"type": "text"
										},
										{
											"key": "code",
											"value": "LinuxSysServicesCheck",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "debcd26a-dbd8-426f-8789-5be3fccef021",
											"description": "分组：Linux系统服务",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "2",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "2",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "import os\nimport platform\nimport json\nimport re\n\n\ndef get_os_info():\n    os_info = platform.uname()._asdict()\n    return os_info\n\n\ndef is_service_running(info_list, service):\n    if len(info_list) > 0:\n        for info in info_list:\n            if info.find(service) >= 0:\n                return True\n    return False\n\n\ndef process(result):\n    info = {}\n    result['info'] = info\n\n    os_info = get_os_info()\n\n    result['risk_level'] = 0\n    result['risk_desc'] = ''\n    result['solution'] = ''\n\n    # 获取所有系统服务\n    os.system(\"systemctl list-units > services.txt\")\n    services = open(\"services.txt\", \"r\").readlines()\n    info['Running Services'] = services\n\n    # Linux/Unix系统服务中，部分服务存在较高安全风险，应当禁用，包括：\n    # “lpd”，此服务为行式打印机后台程序，用于假脱机打印工作的UNIX后台程序，此服务通常情况下不用，建议禁用；\n    # “telnet”，此服务采用明文传输数据，登陆信息容易被窃取，建议用ssh代替；\n    # “routed”，此服务为路由守候进程，使用动态RIP路由选择协议，建议禁用；\n    # “sendmail”，此服务为邮件服务守护进程，非邮件服务器应将其关闭；\n    # “Bluetooth”，此服务为蓝牙服务，如果不需要蓝牙服务时应关闭；\n    # “identd”，此服务为AUTH服务，在提供用户信息方面与finger类似，一般情况下该服务不是必须的，建议关闭；\n    # “xfs”，此服务为Linux中X Window的字体服务，关于该服务历史上出现过信息泄露和拒绝服务等漏洞，应以减少系统风险；\n    # R服务（“rlogin”、“rwho”、“rsh”、“rexec”），R服务设计上存在严重的安全缺陷，仅适用于封闭环境中信任主机之间便捷访问，其他场合下均必须禁用；\n    # 基于inetd/xinetd的服务（daytime、chargen、echo等），此类服务建议禁用。\n    check_list = ['lpd', 'telnet', 'routed', 'sendmail', 'Bluetooth', 'identd', 'xfs',\n                  'rlogin', 'rwho', 'rsh', 'rexec', 'inetd', 'xinetd']\n    for service in check_list:\n        if is_service_running(services, service):\n            result['risk_level'] = 2\n            result['risk_desc'] += '系统启动了 {} 服务，该服务有安全风险。\\n'.format(service)\n            result['solution'] += '关闭 {} 服务，且将其设置成开机不自动启动。\\n'.format(service)\n\n    if result['risk_level'] == 0:\n        result['risk_desc'] = '未发现有安全风险的系统服务。'\n        result['solution'] = '无'\n\n    os.remove('services.txt')\n\n\nif __name__ == '__main__':\n    _result = {}\n    process(_result)\n\n    print(_result)\n",
											"description": "linux/system_service.py",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "2000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "C14. Linux防火墙安全",
					"item": [
						{
							"name": "C.14.1 Linux防火墙服务",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Linux防火墙服务",
											"type": "text"
										},
										{
											"key": "code",
											"value": "LinuxFirewallService",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "c111a6ad-5b51-48b0-88c1-76a34c42f3df",
											"description": "分组：Linux防火墙安全",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "2",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "2",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "import os\nimport platform\nimport json\nimport re\n\n\ndef get_os_info():\n    os_info = platform.uname()._asdict()\n    return os_info\n\n\ndef process(result):\n    info = {}\n    result['info'] = info\n\n    os_info = get_os_info()\n\n    is_fw_run = False\n\n    # 查看 iptables 服务\n    os.system(\"systemctl list-units | grep iptables > firewall.txt\")\n    fw_service = open(\"firewall.txt\", \"r\").readlines()\n    info['Service iptables'] = fw_service\n    if len(fw_service) > 0:\n        is_fw_run = True\n\n    # 查看 firewalld 服务\n    os.system(\"systemctl list-units | grep firewalld > firewall.txt\")\n    fw_service = open(\"firewall.txt\", \"r\").readlines()\n    info['Service firewalld'] = fw_service\n    if len(fw_service) > 0:\n        is_fw_run = True\n\n    if is_fw_run:\n        result['risk_level'] = 0\n        result['risk_desc'] = '系统防火墙正在运行中，可有效防范一些网络攻击。'\n        result['solution'] = '无'\n    else:\n        result['risk_level'] = 3\n        result['risk_desc'] = '系统防火墙未开启，有较大的安全风险。'\n        result['solution'] = '请检查 firewalld 服务是否正常运行，如果没有安装防火墙，请先安装并启动防火墙；同时设置 firewalld 服务为开机启动。'\n\n    os.remove('firewall.txt')\n\n\nif __name__ == '__main__':\n    _result = {}\n    process(_result)\n\n    print(_result)\n",
											"description": "linux/firewall.py",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "2000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "C15. Linux网络配置",
					"item": [
						{
							"name": "C.15.1 端口检查",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Linux网络端口检查",
											"type": "text"
										},
										{
											"key": "code",
											"value": "LinuxNetPortCheck",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "061278e0-95c8-4f18-9104-1fa3b3815a08",
											"description": "分组：Linux网络配置",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "2",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "2",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "#!/usr/bin/python3\n# -*- coding: utf-8 -*-\nfrom socket import *\n\n\ndef process(result):\n    info = []\n    result['info'] = info\n    result['risk_level'] = 0\n    result['risk_desc'] = '未发现网络端口问题。'\n    result['solution'] = '无'\n\n    openportcount = 0\n    ip = '127.0.0.1'\n\n    setdefaulttimeout(1)\n    for p in range(1, 65536):\n        try:\n            s = socket(AF_INET, SOCK_STREAM)\n            s.connect(('127.0.0.1', p))\n            print('[+] %d open' % p)\n            s.close()\n\n            openportcount += 1\n            port_info = {\n                # 'local_ip': ip,\n                'port': p,\n                'status': 'open',\n            }\n            info.append(port_info)\n\n        except:\n            pass\n\n\n    # 开放端口大于3时，需检查确认是否有多余端口\n    if openportcount > 3:\n        result['risk_level'] = 1\n        result['risk_desc'] = '系统开放了太多端口，存在安全风险 共计开放{}个端口。'.format(openportcount)\n        result['solution'] = '请联系系统管理员，维护与工作无关的端口'\n    else:\n        result['risk_level'] = 0\n        result['risk_desc'] = '开放端口数量处于正常范围'\n        result['solution'] = '无'\n\n\nif __name__ == '__main__':\n    _result = {}\n    process(_result)\n\n    print(_result)\n",
											"description": "linux/scan_port.py",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "2000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "C16. Linux系统补丁",
					"item": [
						{
							"name": "C.16.1 Linux系统内核版本检查",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Linux内核版本检查",
											"type": "text"
										},
										{
											"key": "code",
											"value": "LinuxKernelVerCheck",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "95567fd3-9ca5-4871-8c71-e202e361644e",
											"description": "分组：Linux系统补丁",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "2",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "2",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "import os\nimport platform\n# import json\nimport re\n\n\n# 判断两个字符串版本号大小 例如：1.9 < 1.10<1.10.1\ndef compare(a, b):\n    la = a.split('.')\n    lb = b.split('.')\n    f = 0\n    if len(la) > len(lb):\n        f = len(la)\n    else:\n        f = len(lb)\n    for i in range(f):\n        try:\n            if int(la[i]) > int(lb[i]):\n                print(a + '>' + b)\n                return 1\n            elif int(la[i]) == int(lb[i]):\n                continue\n            else:\n                print(a + '<' + b)\n                return 0\n        except IndexError as e:\n            if len(la) > len(lb):\n                print(a + '>' + b)\n                return 1\n            else:\n                print(a + '<' + b)\n                return 0\n    print(a + '=' + b)\n\n\n# 获取操作系统版本信息\ndef show_os_all_info():\n    '''打印os的全部信息'''\n    print('获取操作系统名称及版本号 : [{}]'.format(platform.platform()))\n    print('获取操作系统名称及版本号 : [{}]'.format(platform.platform(aliased=True)))\n    print('获取操作系统名称及版本号 : [{}]'.format(platform.platform(terse=True)))\n    print('获取操作系统版本号 : [{}]'.format(platform.version()))\n    print('获取操作系统的位数 : [{}]'.format(platform.architecture()))\n    print('计算机类型 : [{}]'.format(platform.machine()))\n    print('计算机的网络名称 : [{}]'.format(platform.node()))\n    print('计算机处理器信息 : [{}]'.format(platform.processor()))\n    print('获取操作系统类型 : [{}]'.format(platform.system()))\n    print('汇总信息 : [{}]'.format(platform.uname()))\n    print('汇总信息 : [{}]'.format(platform.uname()._asdict()))\n\n\ndef process(result):\n    info = {}\n    result['info'] = info\n\n    # show_os_all_info()\n\n    version = platform.platform()\n    print('version:',version)\n\n    # re.sub(pattern, repl, string, count=0)\n    # 参数说明：\n    # pattern：正则重的模式字符串\n    # repl：被拿来替换的字符串\n    # string：要被用于替换的原始字符串\n    # count：模式匹配后替换的最大次数，省略则默认为0，表示替换所有的匹配\n    version = re.sub(\"[A-Za-z-_\\!\\%\\[\\]\\,\\。]\", \"\", version)\n    print('version:',version)\n\n    #对比基准版本，根据版本号判断系统是否有安全更新\n    iret = compare(version,\"2.26\")\n    print('iret:',iret)\n    if iret > 0:\n        info['version'] = platform.platform()\n        result['risk_level'] = 0\n        result['risk_desc'] = '当前系统补丁包较新，无安全风险'\n        result['solution'] = '无'\n\n    else:\n        info['version'] = platform.platform()\n        result['risk_level'] = 1\n        result['risk_desc'] = '当前系统补丁包版本过低，存在安全风险'\n        result['solution'] = '联系管理员升级您的操作系统 参考命令：yum clean all & yum update'\n\n\nif __name__ == '__main__':\n    _result = {}\n    process(_result)\n\n    print(_result)\n",
											"description": "linux/system_safety_check.py",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "C.25 TEST",
					"item": [
						{
							"name": "C.14.2 Linux防火墙状态检查",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ac45bc-e4c8-4c19-8093-4848165ce338",
										"exec": [
											"// var num = Math.ceil(Math.random() * 10000);",
											"// pm.environment.set(\"policy_name\", \"policy-\" + num);",
											"// pm.environment.set(\"policy_code\", \"code-\" + num);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4725d9ea-59a8-4fd4-9fdd-ff51bbf4bcdf",
										"exec": [
											"pm.test(\"add policy\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(0);",
											"    ",
											"    // pm.environment.set(\"policy_uuid\", jsonData.payload.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Linux防火墙状态检查",
											"type": "text"
										},
										{
											"key": "code",
											"value": "LinuxFirewalldStatus",
											"type": "text"
										},
										{
											"key": "group_uuid",
											"value": "c111a6ad-5b51-48b0-88c1-76a34c42f3d1",
											"description": "分组：Linux防火墙安全",
											"type": "text"
										},
										{
											"key": "type",
											"value": "1",
											"type": "text"
										},
										{
											"key": "create_user_uuid",
											"value": "{{user_uuid}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "os_type",
											"value": "2",
											"type": "text"
										},
										{
											"key": "baseline",
											"value": "2",
											"type": "text"
										},
										{
											"key": "run_mode",
											"value": "1",
											"type": "text"
										},
										{
											"key": "run_contents",
											"value": "#!/usr/bin/python3.7\n# coding=utf-8\nimport os\nimport json\n\n\n# def ping_ip(ip):  # 1、ping指定IP判断主机是否存活\n#     output = os.popen('ping -c 1 %s' % ip).readlines()  # 注：若在Linux系统下-n 改为 -c\n#     for w in output:\n#         if str(w).upper().find('TTL') >= 0:\n#             # IPList.append(ip)\n#             print(ip)\n\n\ndef getValue(t):\n    return t.split(\"=\")[-1].strip()\n\n\n# def process(info):\ndef process(result):\n    info = {}\n    result['info'] = info\n    result['risk_level'] = 0\n    result['risk_desc'] = ''\n    result['solution'] = '无'\n\n    # ping_ip(\"127.0.0.1\")\n\n    # print(getValue(\"v= 100\"))\n\n    output = os.popen('systemctl status firewalld.service').readlines()  # 注：若在Linux系统下-n 改为 -c\n    print(output)\n    for w in output:\n        if str(w).upper().find('ACTIVE: ACTIVE') >= 0: #Active: active (running)\n            info['Firewall Operational mode'] = '启用'\n            result['risk_level'] = 0\n            result['risk_desc'] = '防火墙已正确开启'\n            result['solution'] = '无'\n        else:\n            info['Firewall Operational mode'] = '未启用'\n            result['risk_level'] = 3\n            result['risk_desc'] = '防火墙未开启，系统不能有效保障网络安全，也不能对网络存取和访问进行有效的监控审计，系统和用户的信息资料有较大的外泄风险。'\n            result['solution'] = '请使用命令开启防火墙：\\n\\tsystemctl start firewalld.service'\n\n\n\n    return\n\n\n\nif __name__ == '__main__':\n    info = {}\n    process(info)\n    print(info)\n\n    result = {'info': info}\n    # analyze(result)\n    # print(result)\n\n    # result = oscoreversion()\n    # print(result)\n",
											"description": "linux/firewall_security.py",
											"type": "text"
										},
										{
											"key": "consume_time",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "asset_uuid",
											"value": "{{asset_uuid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/policies/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"policies",
										"add"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}